package sensoryCoding.test;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.IntStream;

import org.junit.Ignore;
import org.junit.Test;

import sensoryCoding.network.ConfigurationParameters;
import sensoryCoding.network.KernelManager;
import sensoryCoding.network.Network;
import sensoryCoding.network.Signal;
import sensoryCoding.network.SignalUtils;
import sensoryCoding.network.SpikeTimeIndexAndConvolvedValues;
import sensoryCoding.network.Utilities;

public class DriverTest {

	private static final double[] center_frequencies_100_kernels = { 31.074903570227125, 42.64272211867989,
			54.72539400122914, 67.34583399255955, 80.52797674401583, 94.2968221756443, 108.67848288851539,
			123.70023368724425, 139.3905633066296, 155.77922844050948, 172.8973101753005, 190.77727293524583,
			209.45302605116194, 228.9599880694496, 249.3351539233301, 270.61716509369796, 292.84638289264905,
			316.06496500866746, 340.31694545863735, 365.6483180983111, 392.1071238496081, 419.74354181017424,
			448.6099844179877, 478.76119685149365, 510.2543608537783, 543.1492031776851, 577.5081088575394,
			613.3962395223019, 650.8816569745305, 690.0354522695166, 730.9318805393995, 773.6485018179459,
			818.2663281330758, 864.8699771460863, 913.5478326289608, 964.3922120840992, 1017.4995418243674,
			1072.9705398454967, 1130.9104068376619, 1191.4290256984762, 1254.6411699257976, 1320.6667212855448,
			1389.6308971673438, 1461.6644880591762, 1536.9041055914035, 1615.4924416205856, 1697.578538844434,
			1783.3180734611367, 1872.8736504091044, 1966.4151117470694, 2064.119858759372, 2166.173188397313,
			2272.7686446946295, 2384.108385823553, 2500.4035674875754, 2621.8747433780186, 2748.752283453884,
			2881.276810838241, 3019.6996581597227, 3164.2833442046062, 3315.302071783412, 3473.04224775625,
			3637.8030262031357, 3809.8968757693856, 3989.650172262086, 4177.403817621469, 4373.513886441091,
			4578.35230126292, 4792.307537928067, 5015.785362320801, 5249.209599903136, 5493.022939499375,
			5747.687772855005, 6013.687071562171, 6291.525303014791, 6581.72938713044, 6884.849695653443,
			7201.4610959343, 7532.164041165039, 7877.585709138046, 8238.38119168812, 8615.234737073451,
			9008.861047651717, 9420.00663531239, 9849.451237235739, 10298.009294663583, 10766.53149748628,
			11255.906397575207, 11767.062093920447, 12300.967992769602, 12858.636646105682, 13441.125671950942,
			14049.539760138337, 14685.032767354625, 15348.809905428418, 16042.130027013145, 16766.308012999776,
			17522.71726618713, 18312.79231593877, 19138.031538766543 };
	private static final double[] center_frequencies_2000_kernels = { 20.547521948870624, 21.09624864286105,
			21.64618273284361, 22.197326875523576, 22.74968373345182, 23.303255975037906, 23.858046274562817,
			24.41405731219192, 24.971291773987833, 25.52975235192356, 26.08944174389542, 26.650362653735996,
			27.21251779122739, 27.775909872114095, 28.340541618116287, 28.90641575694285, 29.47353502230467,
			30.041902153927662, 30.611519897566282, 31.18239100501652, 31.75451823412938, 32.327904348824035,
			32.902552119101344, 33.47846432105715, 34.05564373689579, 34.63409315494324, 35.21381536966098,
			35.79481318165921, 36.37708939771059, 36.96064683076362, 37.54548829995621, 38.13161663062953,
			38.71903465434146, 39.307745208880284, 39.89775113827856, 40.489055292826585, 41.08166052908645,
			41.67556970990565, 42.27078570443092, 42.86731138812226, 43.46514964276667, 44.06430335649213,
			44.664775423781464, 45.26656874548645, 45.86968622884185, 46.474130787479254, 47.07990534144147,
			47.6870128171962, 48.295456147650704, 48.90523827216547, 49.51636213656871, 50.12883069317063,
			50.74264690077738, 51.35781372470568, 51.97433413679702, 52.59221111543192, 53.21144764554443,
			53.832046718636626, 54.454011332792874, 55.07734449269435, 55.70204920963381, 56.328128501529704,
			56.95558539294112, 57.584422915082236, 58.214644105837, 58.846252009773785, 59.47924967816004,
			60.113640168977284, 60.749426546935574, 61.38661188348834, 62.025199256847465, 62.66519175199795,
			63.30659246071286, 63.949404481568294, 64.59363091995831, 65.23927488810999, 65.88633950509843,
			66.53482789686174, 67.18474319621626, 67.83608854287165, 68.48886708344614, 69.1430819714815,
			69.79873636745856, 70.4558334388123, 71.11437635994712, 71.77436831225239, 72.43581248411753,
			73.09871207094771, 73.76307027517903, 74.42889030629415, 75.09617538083772, 75.76492872243202,
			76.43515356179232, 77.10685313674276, 77.78003069223182, 78.4546894803479, 79.13083276033537,
			79.80846379861002, 80.4875858687749, 81.1682022516362, 81.85031623521904, 82.53393111478339,
			83.21905019283997, 83.90567677916626, 84.59381419082233, 85.28346575216712, 85.97463479487423,
			86.66732465794817, 87.3615386877405, 88.05728023796598, 88.75455266971858, 89.45335935148812,
			90.15370365917617, 90.85558897611244, 91.55901869307142, 92.26399620828823, 92.97052492747551,
			93.67860826383965, 94.38824963809735, 95.09945247849203, 95.81222022081052, 96.52655630839972,
			97.24246419218295, 97.95994733067693, 98.67900919000833, 99.39965324393052, 100.12188297384043,
			100.84570186879526, 101.57111342552936, 102.29812114847125, 103.02672854976038, 103.75693914926421,
			104.48875647459514, 105.22218406112763, 105.95722545201517, 106.69388419820756, 107.43216385846779,
			108.17206799938964, 108.91360019541453, 109.65676402884894, 110.40156308988173, 111.14800097660148,
			111.89608129501394, 112.64580765905917, 113.39718369062933, 114.1502130195861, 114.90489928377802,
			115.66124612905824, 116.41925720930222, 117.17893618642509, 117.94028673039959, 118.70331251927377,
			119.46801723918863, 120.23440458439602, 121.00247825727644, 121.77224196835706, 122.5436994363295,
			123.31685438806777, 124.09171055864641, 124.8682716913585, 125.64654153773355, 126.42652385755602,
			127.20822241888305, 127.99164099806292, 128.77678337975328, 129.56365335693934, 130.35225473095227,
			131.14259131148754, 131.93466691662326, 132.72848537283875, 133.52405051503288, 134.3213661865428,
			135.12043623916225, 135.92126453316044, 136.7238549373005, 137.52821132885808, 138.3343375936404,
			139.14223762600497, 139.95191532887802, 140.76337461377372, 141.576619400813, 142.39165361874248,
			143.20848120495342, 144.02710610550074, 144.84753227512203, 145.66976367725695, 146.49380428406593,
			147.31965807644968, 148.14732904406824, 148.97682118536042, 149.80813850756306, 150.6412850267302,
			151.47626476775287, 152.3130817643781, 153.15174005922879, 153.99224370382288, 154.8345967585933,
			155.67880329290725, 156.52486738508597, 157.3727931224247, 158.2225846012119, 159.07424592674957,
			159.92778121337275, 160.7831945844695, 161.64049017250085, 162.49967211902066, 163.36074457469576,
			164.22371169932597, 165.08857766186406, 165.95534664043612, 166.82402282236146, 167.69461040417315,
			168.56711359163808, 169.44153659977732, 170.31788365288656, 171.19615898455638, 172.0763668376928,
			172.9585114645379, 173.84259712668995, 174.72862809512455, 175.61660865021474, 176.5065430817521,
			177.39843568896728, 178.2922907805506, 179.18811267467322, 180.08590569900784, 180.9856741907495,
			181.8874224966367, 182.7911549729722, 183.69687598564445, 184.6045899101481, 185.51430113160572,
			186.42601404478864, 187.33973305413818, 188.25546257378707, 189.1732070275809, 190.09297084909903,
			191.01475848167644, 191.93857437842496, 192.86442300225505, 193.7923088258969, 194.72223633192257,
			195.65421001276724, 196.58823437075108, 197.52431391810106, 198.46245317697256, 199.40265667947145,
			200.34492896767574, 201.28927459365772, 202.23569811950594, 203.18420411734695, 204.13479716936794,
			205.0874818678382, 206.042262815132, 206.9991446237504, 207.95813191634343, 208.9192293257328,
			209.88244149493408, 210.84777307717906, 211.81522873593832, 212.78481314494388, 213.75653098821147,
			214.7303869600635, 215.7063857651515, 216.6845321184789, 217.6648307454239, 218.64728638176211,
			219.63190377368977, 220.61868767784617, 221.60764286133715, 222.59877410175778, 223.59208618721564,
			224.5875839163538, 225.58527209837408, 226.58515555306028, 227.5872391108014, 228.59152761261524,
			229.59802591017132, 230.6067388658147, 231.61767135258924, 232.63082825426156, 233.64621446534395,
			234.66383489111854, 235.68369444766094, 236.70579806186362, 237.7301506714604, 238.75675722504948,
			239.78562268211812, 240.81675201306575, 241.85015019922898, 242.8858222329048, 243.92377311737533,
			244.96400786693144, 246.00653150689737, 247.05134907365493, 248.0984656146677, 249.14788618850542,
			250.19961586486875, 251.25365972461327, 252.31002285977442, 253.36871037359174, 254.42972738053408,
			255.49307900632363, 256.55877038796115, 257.62680667375065, 258.6971930233243, 259.76993460766727,
			260.84503660914254, 261.9225042215166, 263.00234264998386, 264.08455711119194, 265.1691528332671,
			266.2561350558392, 267.3455090300673, 268.4372800186649, 269.5314532959254, 270.6280341477474,
			271.7270278716605, 272.8284397768506, 273.9322751841859, 275.0385394262425, 276.1472378473297,
			277.2583758035166, 278.37195866265733, 279.48799180441756, 280.6064806202994, 281.7274305136694,
			282.8508468997823, 283.97673520580906, 285.105100870862, 286.23594934602164, 287.36928609436285,
			288.50511659098095, 289.64344632301885, 290.7842807896929, 291.92762550231964, 293.07348598434265,
			294.22186777135903, 295.37277641114616, 296.52621746368857, 297.6821965012046, 298.8407191081737,
			300.0017908813631, 301.1654174298546, 302.3316043750727, 303.5003573508104, 304.67168200325756,
			305.8455839910272, 307.0220689851836, 308.20114266926953, 309.38281073933337, 310.5670789039569,
			311.7539528842831, 312.94343841404304, 314.1355412395844, 315.3302671198989, 316.5276218266498,
			317.7276111442005, 318.93024086964186, 320.1355168128205, 321.3434447963667, 322.5540306557226,
			323.7672802391706, 324.9831994078612, 326.20179403584166, 327.4230700100843, 328.64703323051475,
			329.8736896100408, 331.1030450745805, 332.3351055630913, 333.56987702759835, 334.8073654332233,
			336.04757675821355, 337.2905169939705, 338.53619214507887, 339.78460822933545, 341.0357712777788,
			342.2896873347176, 343.5463624577601, 344.8058027178438, 346.06801419926404, 347.33300299970415,
			348.6007752302643, 349.87133701549146, 351.14469449340874, 352.420853815545, 353.69982114696495,
			354.98160266629833, 356.2662045657703, 357.55363305123103, 358.84389434218593, 360.13699467182556,
			361.43294028705543, 362.73173744852664, 364.03339243066637, 365.3379115217074, 366.6453010237186,
			367.9555672526364, 369.2687165382941, 370.5847552244528, 371.90368966883244, 373.2255262431422,
			374.5502713331111, 375.8779313385192, 377.20851267322854, 378.5420217652135, 379.87846505659286,
			381.21784900366, 382.56018007691455, 383.90546476109375, 385.25370955520344, 386.6049209725493,
			387.9591055407693, 389.31626980186417, 390.67642031222925, 392.03956364268663, 393.40570637851636,
			394.7748551194885, 396.14701647989506, 397.52219708858183, 398.90040358898045, 400.28164263914033,
			401.6659209117614, 403.0532450942255, 404.4436218886292, 405.83705801181634, 407.2335601954099,
			408.63313518584516, 410.0357897444018, 411.4415306472368, 412.85036468541693, 414.26229866495214,
			415.6773394068277, 417.09549374703766, 418.5167685366178, 419.9411706416784, 421.36870694343776,
			422.79938433825544, 424.2332097376653, 425.67019006840906, 427.1103322724701, 428.55364330710614,
			430.0001301448838, 431.44979977371156, 432.902659196874, 434.3587154330655, 435.81797551642376,
			437.28044649656437, 438.74613543861454, 440.2150494232473, 441.687195546716, 443.16258092088765,
			444.6412126732786, 446.12309794708773, 447.60824390123196, 449.09665771038004, 450.58834656498806,
			452.08331767133313, 453.58157825154916, 455.0831355436613, 456.5879968016207, 458.0961692953401,
			459.6076603107284, 461.1224771497265, 462.6406271303417, 464.1621175866841, 465.68695586900094,
			467.2151493437131, 468.7467053934499, 470.28163141708524, 471.8199348297732, 473.3616230629839,
			474.90670356453927, 476.4551837986492, 478.0070712459475, 479.5623734035281, 481.12109778498115,
			482.6832519204294, 484.2488433565647, 485.8178796566842, 487.3903684007272, 488.9663171853115,
			490.5457336237698, 492.12862534618773, 493.71499999943893, 495.30486524722363, 496.89822877010454,
			498.4950982655444, 500.0954814479435, 501.699386048676, 503.3068198161284, 504.917790515736,
			506.5323059300212, 508.15037385863064, 509.7720021183729, 511.3971985432563, 513.0259709845271,
			514.6583273107067, 516.2942754076303, 517.933823178485, 519.5769785438473, 521.2237494417221,
			522.8741438275807, 524.5281696743994, 526.1858349726976, 527.847147730577, 529.5121159737602,
			531.1807477456285, 532.8530511072626, 534.5290341374792, 536.2087049328728, 537.8920716078519,
			539.5791422946804, 541.2699251435163, 542.9644283224501, 544.6626600175458, 546.364628432879,
			548.0703417905778, 549.7798083308617, 551.4930363120815, 553.2100340107595, 554.9308097216295,
			556.6553717576763, 558.3837284501766, 560.1158881487386, 561.8518592213429, 563.5916500543827,
			565.3352690527039, 567.0827246396464, 568.8340252570845, 570.5891793654677, 572.348195443861,
			574.111081989987, 575.8778475202662, 577.6485005698581, 579.423049692703, 581.2015034615622,
			582.983870468061, 584.7701593227289, 586.5603786550419, 588.3545371134636, 590.1526433654876,
			591.9547060976791, 593.7607340157168, 595.570735844435, 597.3847203278659, 599.2026962292814,
			601.0246723312363, 602.8506574356092, 604.6806603636473, 606.514689956007, 608.3527550727972,
			610.1948645936225, 612.0410274176255, 613.8912524635306, 615.7455486696863, 617.6039249941085,
			619.4663904145245, 621.3329539284152, 623.2036245530597, 625.0784113255781, 626.9573233029755,
			628.8403695621854, 630.7275592001143, 632.6189013336849, 634.5144050998803, 636.4140796557883,
			638.317934178646, 640.2259778658831, 642.1382199351672, 644.0546696244483, 645.9753361920027,
			647.9002289164788, 649.8293570969412, 651.7627300529156, 653.7003571244338, 655.6422476720799,
			657.5884110770337, 659.5388567411173, 661.4935940868406, 663.4526325574459, 665.415981616954,
			667.3836507502103, 669.35564946293, 671.3319872817443, 673.3126737542469, 675.297718449039,
			677.2871309557763, 679.2809208852154, 681.27909786926, 683.2816715610071, 685.2886516347945,
			687.3000477862468, 689.315869732322, 691.3361272113597, 693.3608299831271, 695.3899878288659,
			697.4236105513406, 699.4617079748853, 701.5042899454506, 703.5513663306526, 705.6029470198189,
			707.6590419240375, 709.7196609762044, 711.7848141310717, 713.854511365295, 715.9287626774828,
			718.0075780882436, 720.0909676402349, 722.178941398212, 724.2715094490761, 726.3686819019233,
			728.4704688880929, 730.5768805612174, 732.6879270972703, 734.8036186946166, 736.923965574061,
			739.0489779788975, 741.1786661749594, 743.313040450668, 745.4521111170836, 747.5958885079536,
			749.7443829797644, 751.8976049117894, 754.0555647061409, 756.218272787819, 758.385739604763,
			760.557975627901, 762.7349913512016, 764.9167972917228, 767.103403989665, 769.2948220084205,
			771.4910619346243, 773.6921343782063, 775.8980499724424, 778.108819374005, 780.3244532630149,
			782.5449623430932, 784.7703573414133, 787.0006490087513, 789.23584811954, 791.4759654719187,
			793.7210118877871, 795.9709982128568, 798.2259353167041, 800.4858340928221, 802.7507054586733,
			805.0205603557428, 807.2954097495909, 809.5752646299061, 811.860136010558, 814.1500349296506,
			816.4449724495761, 818.7449596570677, 821.050007663253, 823.360127603709, 825.675330638514,
			827.995627952303, 830.3210307543214, 832.6515502784787, 834.9871977834028, 837.327984552495,
			839.6739218939841, 842.0250211409808, 844.381293651533, 846.7427508086802, 849.1094040205089,
			851.4812647202075, 853.8583443661211, 856.2406544418077, 858.6282064560929, 861.0210119431266,
			863.4190824624369, 865.8224295989878, 868.2310649632344, 870.6450001911783, 873.064246944425,
			875.48881691024, 877.9187218016041, 880.3539733572717, 882.7945833418265, 885.240563545738,
			887.6919257854198, 890.148681903285, 892.610843767805, 895.0784232735659, 897.5514323413255,
			900.0298829180726, 902.513786977083, 905.0031565179783, 907.498003566783, 909.9983401759843,
			912.5041784245882, 915.0155304181793, 917.5324082889784, 920.0548241959026, 922.5827903246218,
			925.1163188876193, 927.6554221242502, 930.2001123008007, 932.7504017105468, 935.3063026738148,
			937.8678275380395, 940.4349886778249, 943.0077984950034, 945.586269418696, 948.1704139053722,
			950.7602444389101, 953.3557735306572, 955.9570137194896, 958.5639775718746, 961.1766776819293,
			963.7951266714829, 966.4193371901367, 969.0493219153265, 971.6850935523819, 974.3266648345899,
			976.9740485232545, 979.6272574077594, 982.2863043056299, 984.9512020625938, 987.6219635526446,
			990.2986016781033, 992.9811293696799, 995.6695595865377, 998.3639053163539, 1001.0641795753838,
			1003.7703954085227, 1006.48256588937, 1009.2007041202911, 1011.9248232324813, 1014.6549363860302,
			1017.3910567699828, 1020.1331976024063, 1022.8813721304513, 1025.6355936304174, 1028.3958754078162,
			1031.1622307974374, 1033.934673163411, 1036.7132158992733, 1039.497872428031, 1042.2886562022265,
			1045.0855807040023, 1047.8886594451667, 1050.697905967259, 1053.5133338416147, 1056.3349566694305,
			1059.162788081831, 1061.9968417399348, 1064.8371313349187, 1067.683670588086, 1070.5364732509315,
			1073.395553105208, 1076.2609239629933, 1079.1325996667563, 1082.0105940894257, 1084.8949211344539,
			1087.7855947358864, 1090.6826288584298, 1093.5860374975166, 1096.4958346793746, 1099.4120344610947,
			1102.3346509306987, 1105.2636982072063, 1108.1991904407048, 1111.141141812416, 1114.0895665347666,
			1117.044478851455, 1120.0058930375205, 1122.973823399414, 1125.9482842750647, 1128.9292900339499,
			1131.9168550771658, 1134.9109938374966, 1137.9117207794825, 1140.9190503994914, 1143.9329972257897,
			1146.953575818609, 1149.9808007702204, 1153.0146867050018, 1156.0552482795117, 1159.102500182557,
			1162.156457135265, 1165.2171338911567, 1168.284545236214, 1171.3587059889544, 1174.4396310005006,
			1177.5273351546543, 1180.6218333679665, 1183.7231405898092, 1186.8312718024492, 1189.9462420211198,
			1193.0680662940922, 1196.1967597027501, 1199.3323373616622, 1202.474814418653, 1205.6242060548789,
			1208.7805274848997, 1211.9437939567538, 1215.114020752029, 1218.2912231859393, 1221.475416607398,
			1224.6666163990903, 1227.86483797755, 1231.0700967932314, 1234.2824083305873, 1237.5017881081403,
			1240.7282516785594, 1243.9618146287366, 1247.2024925798587, 1250.450301187486, 1253.7052561416258,
			1256.9673731668101, 1260.2366680221696, 1263.5131565015115, 1266.7968544333937, 1270.0877776812044,
			1273.385942143236, 1276.6913637527628, 1280.0040584781182, 1283.324042322772, 1286.6513313254068,
			1289.9859415599958, 1293.3278891358823, 1296.6771901978545, 1300.0338609262249, 1303.3979175369097,
			1306.7693762815047, 1310.1482534473657, 1313.534565357686, 1316.928328371577, 1320.3295588841445,
			1323.73827332657, 1327.1544881661903, 1330.5782199065752, 1334.009485087609, 1337.4483002855686,
			1340.8946821132063, 1344.3486472198272, 1347.8102122913713, 1351.2793940504932, 1354.7562092566445,
			1358.2406747061525, 1361.7328072323023, 1365.2326237054199, 1368.74014103295, 1372.2553761595414,
			1375.7783460671255, 1379.3090677750024, 1382.8475583399193, 1386.3938348561535, 1389.947914455598,
			1393.5098143078408, 1397.0795516202493, 1400.657143638053, 1404.2426076444283, 1407.8359609605798,
			1411.437220945824, 1415.0464049976774, 1418.663530551934, 1422.288615082754, 1425.921676102747,
			1429.5627311630572, 1433.2117978534468, 1436.8688938023822, 1440.5340366771186, 1444.2072441837859,
			1447.8885340674733, 1451.5779241123155, 1455.2754321415798, 1458.98107601775, 1462.694873642614,
			1466.4168429573497, 1470.1470019426135, 1473.8853686186244, 1477.6319610452517, 1481.3867973221054,
			1485.1498955886188, 1488.9212740241394, 1492.7009508480153, 1496.488944319685, 1500.285272738763,
			1504.08995444513, 1507.9030078190208, 1511.7244512811142, 1515.5543032926198, 1519.3925823553689,
			1523.2393070119044, 1527.094495845569, 1530.9581674805947, 1534.8303405821937, 1538.7110338566495,
			1542.600266051405, 1546.498055955154, 1550.4044223979342, 1554.3193842512135, 1558.2429604279855,
			1562.175169882858, 1566.1160316121475, 1570.0655646539678, 1574.023788088323, 1577.9907210372023,
			1581.9663826646677, 1585.95079217695, 1589.9439688225407, 1593.9459318922852, 1597.9567007194755,
			1601.9762946799424, 1606.0047331921533, 1610.0420357173007, 1614.0882217593996, 1618.1433108653812,
			1622.2073226251866, 1626.280276671862, 1630.362192681653, 1634.4530903741, 1638.5529895121344,
			1642.661909902172, 1646.7798713942102, 1650.9068938819244, 1655.042997302762, 1659.18820163804,
			1663.342526913042, 1667.5059931971152, 1671.6786206037657, 1675.8604292907548, 1680.051439460202,
			1684.2516713586758, 1688.461145277295, 1692.6798815518262, 1696.9079005627832, 1701.1452227355223,
			1705.3918685403437, 1709.647858492591, 1713.913213152747, 1718.1879531265356, 1722.4720990650205,
			1726.7656716647061, 1731.0686916676357, 1735.3811798614927, 1739.7031570797005, 1744.0346442015248,
			1748.3756621521718, 1752.7262319028907, 1757.0863744710764, 1761.4561109203687, 1765.8354623607545,
			1770.2244499486706, 1774.6230948871064, 1779.0314184257045, 1783.4494418608645, 1787.8771865358465,
			1792.314673840872, 1796.7619252132304, 1801.2189621373789, 1805.685806145051, 1810.1624788153542,
			1814.649001774881, 1819.145396697808, 1823.651685306004, 1828.167889369134, 1832.6940307047616,
			1837.2301311784606, 1841.7762127039143, 1846.3322972430249, 1850.8984068060172, 1855.47456345155,
			1860.060789286815, 1864.6571064676496, 1869.263537198643, 1873.8801037332405, 1878.506828373854,
			1883.1437334719678, 1887.7908414282495, 1892.4481746926544, 1897.1157557645356, 1901.793607192755,
			1906.4817515757882, 1911.1802115618354, 1915.889009848932, 1920.6081691850572, 1925.3377123682437,
			1930.0776622466879, 1934.8280417188596, 1939.5888737336156, 1944.360181290307, 1949.1419874388914,
			1953.9343152800461, 1958.7371879652765, 1963.5506286970306, 1968.3746607288097, 1973.2093073652818,
			1978.0545919623935, 1982.910537927481, 1987.7771687193883, 1992.6545078485751, 1997.5425788772325,
			2002.4414054193971, 2007.3510111410667, 2012.2714197603102, 2017.2026550473852, 2022.1447408248548,
			2027.0977009676976, 2032.0615594034264, 2037.0363401122038, 2042.0220671269574, 2047.0187645334954,
			2052.0264564706235, 2057.0451671302603, 2062.0749207575577, 2067.115741651015, 2072.1676541625957,
			2077.230682697847, 2082.3048517160173, 2087.390185730174, 2092.4867093073217, 2097.594447068521,
			2102.7134236890097, 2107.8436638983185, 2112.985192480391, 2118.1380342737066, 2123.3022141713964,
			2128.4777571213654, 2133.664688126415, 2138.863032244358, 2144.072814588148, 2149.294060325994,
			2154.526794681483, 2159.771042933704, 2165.0268304173687, 2170.2941825229354, 2175.5731246967284,
			2180.8636824410664, 2186.165881314379, 2191.4797469313357, 2196.8053049629657, 2202.1425811367853,
			2207.4916012369195, 2212.852391104227, 2218.22497663643, 2223.6093837882295, 2229.005638571439,
			2234.413767055106, 2239.8337953656414, 2245.265749686941, 2250.7096562605157, 2256.165541385619,
			2261.633431419369, 2267.1133527768816, 2272.6053319313937, 2278.1093954143926, 2283.6255698157465,
			2289.153881783828, 2294.6943580256493, 2300.247025306985, 2305.811910452505, 2311.389040345902,
			2316.9784419300227, 2322.5801422069994, 2328.1941682383767, 2333.820547145247, 2339.4593061083765,
			2345.1104723683397, 2350.774073225649, 2356.45013604089, 2362.138688234849, 2367.83975728865,
			2373.553370743883, 2379.279556202743, 2385.0183413281566, 2390.7697538439197, 2396.5338215348306,
			2402.3105722468235, 2408.1000338871054, 2413.902234424286, 2419.717201888521, 2425.5449643716374,
			2431.3855500272784, 2437.2389870710317, 2443.1053037805714, 2448.9845284957937, 2454.876689618948,
			2460.7818156147873, 2466.69993501069, 2472.6310763968067, 2478.5752684261984, 2484.532539814971,
			2490.5029193424175, 2496.4864358511536, 2502.4831182472644, 2508.492995500433, 2514.5160966440894,
			2520.552450775546, 2526.6020870561397, 2532.665034711375, 2538.7413230310585, 2544.830981369452,
			2550.9340391454007, 2557.0505258424855, 2563.180471009159, 2569.3239042588943, 2575.4808552703216,
			2581.6513537873757, 2587.835429619441, 2594.033112641492, 2600.2444327942367, 2606.469420084266,
			2612.708104584194, 2618.960516432808, 2625.2266858352086, 2631.506643062962, 2637.8004184542397,
			2644.108042413968, 2650.4295454139774, 2656.7649579931453, 2663.114310757547, 2669.4776343806006,
			2675.8549596032162, 2682.24631723395, 2688.6517381491417, 2695.071253293074, 2701.5048936781172,
			2707.952690384878, 2714.4146745623552, 2720.8908774280826, 2727.3813302682884, 2733.8860644380384,
			2740.405111361391, 2746.9385025315505, 2753.486269511016, 2760.0484439317356, 2766.6250574952587,
			2773.216141972893, 2779.8217292058507, 2786.4418511054064, 2793.0765396530524, 2799.7258269006506,
			2806.38974497059, 2813.0683260559367, 2819.7616024206004, 2826.4696063994757, 2833.192370398609,
			2839.9299268953514, 2846.6823084385146, 2853.449547648531, 2860.231677217607, 2867.0287299098886,
			2873.8407385616106, 2880.66773608126, 2887.5097554497347, 2894.3668297205027, 2901.238992019761,
			2908.1262755465946, 2915.028713573144, 2921.9463394447544, 2928.879186580145, 2935.827288471568,
			2942.790678684971, 2949.7693908601586, 2956.763458710953, 2963.772916025364, 2970.7977966657427,
			2977.8381345689504, 2984.893963746523, 2991.9653182848315, 2999.052232345253, 3006.1547401643284,
			3013.272876053931, 3020.406674401438, 3027.5561696698855, 3034.721396398143, 3041.9023892010764,
			3049.099182769719, 3056.3118118714347, 3063.5403113500884, 3070.784716126217, 3078.0450611971924,
			3085.3213816373927, 3092.6137125983732, 3099.9220893090364, 3107.2465470757993, 3114.5871212827647,
			3121.943847391898, 3129.31676094319, 3136.705897554831, 3144.1112929233873, 3151.5329828239687,
			3158.971003110403, 3166.425389715409, 3173.896178650774, 3181.3834060075196, 3188.8871079560827,
			3196.4073207464876, 3203.944080708522, 3211.4974242519124, 3219.0673878664975, 3226.6540081224125,
			3234.257321670254, 3241.877365241266, 3249.5141756475136, 3257.1677897820628, 3264.8382446191554,
			3272.52557721439, 3280.2298247049057, 3287.9510243095506, 3295.689213329071, 3303.4444291462864,
			3311.2167092262735, 3319.006091116544, 3326.812612447228, 3334.6363109312583, 3342.4772243645466,
			3350.335390626169, 3358.2108476785515, 3366.103633567649, 3374.0137864231315, 3381.941344458569,
			3389.8863459716126, 3397.8488293441874, 3405.828833042667, 3413.8263956180676, 3421.84155570623,
			3429.874352028009, 3437.924823389459, 3445.993008682018, 3454.078946882709, 3462.182677054307,
			3470.304238345547, 3478.4436699913003, 3486.6010113127722, 3494.776301717688, 3502.9695807004805,
			3511.180887842493, 3519.410262812155, 3527.6577453651826, 3535.9233753447684, 3544.2071926817744,
			3552.509237394926, 3560.8295495910006, 3569.1681694650324, 3577.5251373004926, 3585.9004934694917,
			3594.294278432975, 3602.7065327409136, 3611.1372970325074, 3619.586612036371, 3628.0545185707447,
			3636.541057543678, 3645.0462699532327, 3653.570196887684, 3662.1128795257123, 3670.6743591366103,
			3679.254677080472, 3687.8538748084075, 3696.4719938627263, 3705.109075877149, 3713.765162577004,
			3722.440295779433, 3731.1345173935883, 3739.8478694208366, 3748.5803939549633, 3757.3321331823795,
			3766.103129382316, 3774.8934249270364, 3783.7030622820357, 3792.53208400625, 3801.3805327522605,
			3810.2484512664973, 3819.135882389454, 3828.0428690558815, 3836.9694542950074, 3845.9156812307347,
			3854.8815930818596, 3863.8672331622715, 3872.872644881164, 3881.897871743255, 3890.942957348981,
			3900.007945394717, 3909.092879672986, 3918.197804072669, 3927.322762579221, 3936.4677992748757,
			3945.632958338873, 3954.8182840476534, 3964.0238207750876, 3973.24961299268, 3982.4957052697914,
			3991.762142273851, 4001.0489687705704, 4010.356229624167, 4019.6839697975693, 4029.032234352644,
			4038.401068450408, 4047.7905173512518, 4057.2006264151514, 4066.631441101891, 4076.0830069712897,
			4085.555369683407, 4095.0485749987715, 4104.562668778606, 4114.097696985039, 4123.653705681337,
			4133.2307410321155, 4142.828849303581, 4152.4480768637295, 4162.08847018259, 4171.75007583244,
			4181.432940488034, 4191.137110926827, 4200.862634029201, 4210.609556778691, 4220.377926262216,
			4230.1677896703, 4239.979194297305, 4249.8121875416555, 4259.66681690607, 4269.543129997793,
			4279.441174528815, 4289.360998316122, 4299.302649281903, 4309.266175453797, 4319.251624965124,
			4329.25904605511, 4339.288487069127, 4349.339996458923, 4359.413622782861, 4369.509414706147,
			4379.627421001066, 4389.767690547223, 4399.930272331773, 4410.115215449662, 4420.322569103861,
			4430.552382605609, 4440.804705374644, 4451.079586939447, 4461.377076937476, 4471.697225115412,
			4482.040081329399, 4492.405695545275, 4502.794117838832, 4513.205398396035, 4523.639587513285,
			4534.096735597647, 4544.576893167104, 4555.080110850795, 4565.6064393892575, 4576.155929634686,
			4586.72863255116, 4597.324599214901, 4607.943880814516, 4618.586528651245, 4629.2525941392105,
			4639.942128805661, 4650.65518429123, 4661.391812350176, 4672.152064850631, 4682.935993774861,
			4693.74365121951, 4704.575089395853, 4715.430360630049, 4726.30951736339, 4737.212612152566,
			4748.139697669904, 4759.090826703629, 4770.066052158123, 4781.065427054172, 4792.089004529229,
			4803.136837837667, 4814.208980351045, 4825.30548555835, 4836.426407066266, 4847.5717985994315,
			4858.741714000702, 4869.9362072314, 4881.155332371584, 4892.399143620318, 4903.66769529591,
			4914.9610418361935, 4926.279237798785, 4937.622337861348, 4948.990396821852, 4960.383469598846,
			4971.801611231723, 4983.2448768809745, 4994.713321828468, 5006.207001477714, 5017.725971354126,
			5029.270287105296, 5040.840004501258, 5052.435179434768, 5064.0558679215565, 5075.702126100614,
			5087.374010234455, 5099.0715767093925, 5110.794882035811, 5122.543982848431, 5134.318935906605,
			5146.119798094561, 5157.9466264217, 5169.799478022863, 5181.678410158607, 5193.583480215486,
			5205.514745706319, 5217.472264270484, 5229.4560936741755, 5241.466291810702, 5253.502916700754,
			5265.566026492688, 5277.655679462812, 5289.771934015659, 5301.9148486842705, 5314.084482130493,
			5326.280893145237, 5338.5041406487835, 5350.754283691052, 5363.031381451898, 5375.335493241392,
			5387.666678500106, 5400.024996799411, 5412.410507841748, 5424.823271460926, 5437.263347622413,
			5449.730796423619, 5462.225678094193, 5474.748052996306, 5487.297981624958, 5499.875524608249,
			5512.480742707687, 5525.113696818476, 5537.774447969812, 5550.463057325178, 5563.179586182634,
			5575.924095975129, 5588.696648270773, 5601.497304773157, 5614.326127321639, 5627.183177891645,
			5640.06851859497, 5652.982211680076, 5665.9243195324, 5678.894904674641, 5691.894029767078,
			5704.921757607857, 5717.978151133311, 5731.063273418249, 5744.177187676268, 5757.319957260063,
			5770.491645661725, 5783.692316513046, 5796.922033585835, 5810.180860792224, 5823.468862184969,
			5836.786101957769, 5850.132644445568, 5863.508554124879, 5876.913895614079, 5890.348733673729,
			5903.813133206888, 5917.307159259425, 5930.830877020334, 5944.384351822044, 5957.967649140749,
			5971.580834596703, 5985.223973954555, 5998.897133123654, 6012.60037815838, 6026.333775258452,
			6040.0973907692505, 6053.891291182147, 6067.715543134813, 6081.570213411545, 6095.4553689435925,
			6109.371076809477, 6123.317404235314, 6137.294418595142, 6151.302187411255, 6165.340778354507,
			6179.41025924466, 6193.5106980507, 6207.642162891173, 6221.804722034509, 6235.998443899348,
			6250.223397054887, 6264.47965022119, 6278.767272269533, 6293.086332222733, 6307.436899255484,
			6321.819042694687, 6336.232832019782, 6350.678336863105, 6365.155627010192, 6379.664772400139,
			6394.205843125931, 6408.778909434785, 6423.384041728486, 6438.021310563725, 6452.6907866524525,
			6467.392540862202, 6482.126644216442, 6496.893167894921, 6511.692183234009, 6526.523761727035,
			6541.38797502465, 6556.284894935148, 6571.214593424846, 6586.177142618395, 6601.172614799156,
			6616.201082409535, 6631.262618051339, 6646.357294486126, 6661.48518463555, 6676.64636158173,
			6691.840898567583, 6707.068868997189, 6722.330346436143, 6737.625404611912, 6752.954117414189,
			6768.316558895245, 6783.712803270309, 6799.142924917896, 6814.606998380183, 6830.105098363368,
			6845.6372997380295, 6861.203677539488, 6876.804306968165, 6892.439263389963, 6908.108622336602,
			6923.8124595060035, 6939.550850762654, 6955.323872137966, 6971.131599830651, 6986.974110207079,
			7002.851479801669, 7018.7637853172255, 7034.711103625335, 7050.693511766729, 7066.711086951655,
			7082.763906560252, 7098.852048142916, 7114.975589420698, 7131.13460828565, 7147.329182801215,
			7163.559391202608, 7179.82531189719, 7196.127023464841, 7212.4646046583475, 7228.838134403787,
			7245.247691800894, 7261.6933561234555, 7278.175206819684, 7294.693323512615, 7311.247786000477,
			7327.838674257084, 7344.466068432218, 7361.130048852033, 7377.830696019416, 7394.568090614392,
			7411.342313494512, 7428.153445695245, 7445.001568430364, 7461.886763092338, 7478.809111252741,
			7495.7686946626245, 7512.76559525292, 7529.799895134844, 7546.871676600278, 7563.981022122184,
			7581.128014354985, 7598.312736134988, 7615.535270480753, 7632.795700593523, 7650.094109857606,
			7667.4305818407865, 7684.805200294734, 7702.218049155393, 7719.6692125434065, 7737.158774764508,
			7754.686820309933, 7772.253433856831, 7789.858700268668, 7807.502704595646, 7825.185532075095,
			7842.907268131922, 7860.667998378975, 7878.467808617494, 7896.306784837508, 7914.185013218257,
			7932.102580128605, 7950.059572127457, 7968.056075964184, 7986.092178579036, 8004.167967103558,
			8022.283528861016, 8040.438951366824, 8058.634322328955, 8076.869729648372, 8095.145261419465,
			8113.461005930443, 8131.817051663793, 8150.213487296693, 8168.6504017014395, 8187.127883945884,
			8205.646023293855, 8224.204909205599, 8242.804631338207, 8261.445279546042, 8280.126943881185,
			8298.849714593858, 8317.613682132873, 8336.418937146052, 8355.265570480684, 8374.153673183955,
			8393.08333650338, 8412.054651887258, 8431.067710985104, 8450.122605648094, 8469.21942792951,
			8488.358270085186, 8507.539224573955, 8526.762384058085, 8546.027841403742, 8565.335689681426,
			8584.686022166425, 8604.078932339267, 8623.514513886174, 8642.992860699509, 8662.514066878233,
			8682.07822672836, 8701.685434763402, 8721.335785704845, 8741.029374482594, 8760.766296235428,
			8780.546646311477, 8800.370520268661, 8820.238013875167, 8840.149223109904, 8860.104244162965,
			8880.103173436106, 8900.146107543189, 8920.23314331068, 8940.36437777808, 8960.539908198416,
			8980.75983203871, 9001.024246980447, 9021.333250920045, 9041.68694196932, 9062.085418455992,
			9082.528778924116, 9103.017122134586, 9123.550547065612, 9144.12915291318, 9164.75303909155,
			9185.42230523373, 9206.137051191947, 9226.897377038156, 9247.703383064494, 9268.555169783778,
			9289.45283792999, 9310.396488458764, 9331.386222547872, 9352.422141597706, 9373.504347231796,
			9394.632941297263, 9415.80802586533, 9437.029703231818, 9458.298075917632, 9479.61324666926,
			9500.975318459268, 9522.384394486811, 9543.840578178104, 9565.34397318694, 9586.894683395196,
			9608.492812913315, 9630.138466080827, 9651.831747466838, 9673.572761870566, 9695.361614321802,
			9717.19841008145, 9739.083254642019, 9761.01625372815, 9782.997513297107, 9805.0271395393,
			9827.105238878801, 9849.231917973855, 9871.40728371738, 9893.631443237511, 9915.904503898093,
			9938.22657329922, 9960.597759277729, 9983.01816990776, 10005.487913501242, 10028.00709860842,
			10050.575834018406, 10073.194228759678, 10095.862392100615, 10118.580433550027, 10141.348462857683,
			10164.166590014847, 10187.034925254795, 10209.953579053361, 10232.92266212946, 10255.942285445633,
			10279.012560208579, 10302.13359786968, 10325.305510125576, 10348.528408918657, 10371.802406437637,
			10395.12761511808, 10418.504147642949, 10441.932116943159, 10465.411636198098, 10488.942818836209,
			10512.525778535506, 10536.160629224132, 10559.847485080922, 10583.586460535938, 10607.377670271037,
			10631.221229220406, 10655.117252571146, 10679.065855763796, 10703.06715449291, 10727.121264707614,
			10751.228302612159, 10775.388384666492, 10799.601627586804, 10823.868148346126, 10848.188064174848,
			10872.56149256132, 10896.988551252405, 10921.469358254057, 10946.004031831875, 10970.59269051169,
			10995.235453080148, 11019.932438585243, 11044.683766336928, 11069.489555907689, 11094.349927133098,
			11119.265000112422, 11144.234895209178, 11169.259733051744, 11194.339634533908, 11219.474720815471,
			11244.66511332283, 11269.910933749565, 11295.212304057024, 11320.569346474915, 11345.98218350189,
			11371.450937906156, 11396.975732726043, 11422.556691270609, 11448.19393712024, 11473.887594127244,
			11499.63778641644, 11525.444638385776, 11551.308274706924, 11577.228820325867, 11603.20640046352,
			11629.241140616325, 11655.333166556866, 11681.482604334471, 11707.689580275812, 11733.95422098555,
			11760.276653346897, 11786.657004522262, 11813.095401953859, 11839.591973364317, 11866.146846757307,
			11892.760150418138, 11919.432012914423, 11946.162563096643, 11972.951930098803, 11999.800243339054,
			12026.707632520309, 12053.674227630878, 12080.700158945083, 12107.785557023913, 12134.930552715627,
			12162.135277156392, 12189.399861770933, 12216.724438273151, 12244.109138666765, 12271.554095245943,
			12299.059440595971, 12326.625307593848, 12354.251829408951, 12381.93913950369, 12409.687371634127,
			12437.496659850645, 12465.36713849858, 12493.298942218886, 12521.292205948765, 12549.347064922333,
			12577.463654671266, 12605.642111025465, 12633.882570113701, 12662.185168364282, 12690.55004250569,
			12718.977329567293, 12747.467166879944, 12776.019692076681, 12804.635043093385, 12833.313358169446,
			12862.054775848432, 12890.859434978745, 12919.727474714326, 12948.659034515289, 12977.654254148607,
			13006.713273688803, 13035.836233518603, 13065.023274329636, 13094.274537123085, 13123.590163210414,
			13152.970294214003, 13182.415072067855, 13211.924639018285, 13241.499137624593, 13271.138710759764,
			13300.84350161115, 13330.613653681188, 13360.449310788046, 13390.350617066355, 13420.317716967897,
			13450.350755262287, 13480.449877037701, 13510.615227701544, 13540.846952981195, 13571.145198924663,
			13601.510111901323, 13631.941838602612, 13662.440526042745, 13693.00632155942, 13723.639372814523,
			13754.33982779487, 13785.107834812883, 13815.943542507328, 13846.847099844032, 13877.8186561166,
			13908.858360947135, 13939.966364286958, 13971.142816417356, 14002.387867950269, 14033.70166982904,
			14065.084373329151, 14096.536130058937, 14128.057091960327, 14159.647411309576, 14191.307240717999,
			14223.036733132727, 14254.83604183741, 14286.705320452986, 14318.644722938412, 14350.654403591412,
			14382.73451704922, 14414.885218289317, 14447.106662630216, 14479.399005732166, 14511.762403597924,
			14544.197012573519, 14576.702989348989, 14609.280490959152, 14641.92967478435, 14674.650698551242,
			14707.443720333516, 14740.30889855269, 14773.246391978864, 14806.256359731493, 14839.338961280146,
			14872.49435644528, 14905.722705399035, 14939.024168665966, 14972.398907123848, 15005.84708200444,
			15039.368854894274, 15072.964387735426, 15106.6338428263, 15140.377382822437, 15174.19517073725,
			15208.087369942856, 15242.054144170843, 15276.09565751307, 15310.212074422456, 15344.40355971377,
			15378.670278564456, 15413.012396515378, 15447.430079471667, 15481.9234937035, 15516.492805846907,
			15551.138182904577, 15585.859792246667, 15620.657801611604, 15655.532379106915, 15690.483693210006,
			15725.511912769001, 15760.617207003548, 15795.799745505648, 15831.059698240455, 15866.397235547101,
			15901.812528139551, 15937.30574710738, 15972.877063916632, 16008.526650410628, 16044.254678810817,
			16080.061321717587, 16115.946752111111, 16151.911143352198, 16187.954669183087, 16224.077503728331,
			16260.27982149561, 16296.561797376586, 16332.923606647744, 16369.365424971238, 16405.88742839576,
			16442.489793357345, 16479.172696680278, 16515.936315577896, 16552.78082765348, 16589.70641090111,
			16626.713243706497, 16663.801504847892, 16700.9713734969, 16738.22302921938, 16775.556651976287,
			16812.97242212457, 16850.47052041802, 16888.051128008145, 16925.714426445076, 16963.460597678397,
			17001.289824058043, 17039.202288335207, 17077.198173663182, 17115.277663598266, 17153.440942100646,
			17191.688193535305, 17230.01960267288, 17268.435354690566, 17306.93563517302, 17345.520630113257,
			17384.19052591353, 17422.945509386263, 17461.78576775491, 17500.711488654917, 17539.722860134567,
			17578.820070655926, 17618.003309095744, 17657.272764746365, 17696.62862731666, 17736.071086932894,
			17775.60033413972, 17815.216559901033, 17854.91995560092, 17894.710713044573, 17934.58902445925,
			17974.55508249515, 18014.609080226383, 18054.75121115191, 18094.981669196426, 18135.300648711356,
			18175.708344475755, 18216.20495169726, 18256.790666013043, 18297.46568349074, 18338.230200629423,
			18379.084414360517, 18420.028522048768, 18461.0627214932, 18502.18721092806, 18543.402189023793,
			18584.70785488797, 18626.1044080663, 18667.592048543545, 18709.170976744503, 18750.841393534985,
			18792.603500222776, 18834.457498558615, 18876.403590737154, 18918.441979397965, 18960.57286762649,
			19002.796458955032, 19045.112957363726, 19087.52256728156, 19130.02549358732, 19172.6219416106,
			19215.312117132817, 19258.096226388152, 19300.97447606459, 19343.947073304902, 19387.014225707644,
			19430.176141328164, 19473.433028679607, 19516.785096733918, 19560.232554922877, 19603.775613139067,
			19647.414481736912, 19691.14937153369, 19734.98049381057, 19778.908060313595, 19822.932283254726,
			19867.053375312895, 19911.27154963497, 19955.58701983684 };
	private static final double[] center_frequencies_1000_kernels = { 21.09569986229503, 22.196224480229734,
			23.301595098916756, 24.41183305701849, 25.52695978715903, 26.646996816337982, 27.7719657663459,
			28.901888354181846, 30.036786392472475, 31.17668178989318, 32.32159655159111, 33.47155277960983,
			34.62657267331606, 35.7866785298282, 36.95189274444686, 38.122237811086976, 39.29773632271231,
			40.478410971771396, 41.66428455063573, 42.85537995203965, 44.05172016952234, 45.253328297871825,
			46.46022753357046, 47.67244117524323, 48.88999262410695, 50.11290538442253, 51.34120306394841,
			52.57490937439628, 53.8140481318891, 55.058643257420535, 56.308718777316926, 57.56429882370109,
			58.82540763495806, 60.092069556203256, 61.3643090397521, 62.64215064559241, 63.925619041858226,
			65.21473900530614, 66.50953542179369, 67.81003328675968, 69.11625770570664, 70.42823389468555,
			71.7459871807827, 73.06954300260846, 74.39892691078843, 75.73416456845675, 77.0752817517514,
			78.42230435031189, 79.77525836777897, 81.13416992229672, 82.49906524701657, 83.86997069060388,
			85.24691271774667, 86.62991790966616, 88.01901296463032, 89.41422469846898, 90.81558004509158,
			92.22310605700717, 93.63682990584664, 95.05677888288707, 96.48298039957892, 97.91546198807487,
			99.3542513017615, 100.79937611579307, 102.25086432762767, 103.70874395756587, 105.17304314929154,
			106.64379017041516, 108.12101341301954, 109.60474139420806, 111.09500275665475, 112.59182626915778,
			114.09524082719437, 115.60527545347888, 117.12195929852308, 118.6453216411985, 120.17539188930226,
			121.71219958012438, 123.25577438101782, 124.80614608997175, 126.36334463618628, 127.92740008065047,
			129.49834261672265, 131.07620257071312, 132.6610104024697, 134.25279670596586, 135.85159220989112,
			137.45742777824432, 139.07033441092952, 140.69034324435418, 142.3174855520307, 143.95179274517966,
			145.59329637333641, 147.24202812496029, 148.89801982804585, 150.561303450738, 152.23191110194844,
			153.9098750319759, 155.59522763312873, 157.28800144035, 158.98822913184569, 160.69594352971563,
			162.4111776005869, 164.13396445625045, 165.86433735429998, 167.60232969877458, 169.34797504080282,
			171.10130707925103, 172.86235966137343, 174.63116678346591, 176.40776259152207, 178.19218138189228,
			179.98445760194625, 181.78462585073734, 183.59272087967105, 185.40877759317556, 187.2328310493758,
			189.0649164607699, 190.90506919490915, 192.7533247750808, 194.60971888099374, 196.4742873494672,
			198.34706617512276, 200.22809151107916, 202.1173996696499, 204.01502712304475, 205.9210105040734,
			207.835386606853, 209.75819238751808, 211.6894649649343, 213.6292416214147, 215.57755980343978,
			217.53445712238005, 219.49997135522233, 221.4741404452989, 223.4570025030199, 225.44859580660935,
			227.4489588028437, 229.4581301077943, 231.47614850757296, 233.50305295908, 235.53888259075725,
			237.5836767033429, 239.63747477063023, 241.70031644022956, 243.7722415343337, 245.85329005048678,
			247.9435021623565, 250.04291822050914, 252.1515787531892, 254.26952446710115, 256.39679624819564,
			258.5334351624588, 260.67948245670476, 262.83497955937196, 264.9999680813232, 267.17448981664825,
			269.3585867434717, 271.55230102476213, 273.7556750091472, 275.9687512317302, 278.19157241491183,
			280.4241814692145, 282.6666214941111, 284.91893577885656, 287.18116780332406, 289.4533612388439,
			291.7355599490468, 294.0278079907105, 296.3301496146107, 298.64262926637485, 300.9652915873402,
			303.2981814154154, 305.64134378594696, 307.9948239325876, 310.3586672881699, 312.7329194855835,
			315.11762635865574, 317.51283394303647, 319.9185884770871, 322.33493640277294, 324.76192436655947,
			327.1995992203135, 329.6480080222071, 332.10719803762595, 334.57721674008246, 337.05811181213153,
			339.54993114629116, 342.05272284596737, 344.5665352263824, 347.09141681550767, 349.6274163550004,
			352.17458280114465, 354.73296532579656, 357.302613317333, 359.88357638160596, 362.4759043428991,
			365.0796472448907, 367.6948553516183, 370.32157914845055, 372.9598693430608, 375.6097768664064,
			378.2713528737118, 380.9446487454558, 383.62971608836415, 386.3266067364051, 389.03537275179013,
			391.75606642597944, 394.488740280691, 397.2334470689142, 399.99023977592907, 402.7591716203284,
			405.5402960550456, 408.3336667683859, 411.13933768506354, 413.9573629672422, 416.787797015581,
			419.6306944702845, 422.4861102121573, 425.35409936366375, 428.2347172899921, 431.128019600123,
			434.03406214790334, 436.9529010331243, 439.88459260260424, 442.8291934512768, 445.786760423283,
			448.7573506130689, 451.74102136648776, 454.737830281907, 457.7478352113198, 460.77109426146245,
			463.807665794936, 466.8576084313324, 469.92098104836685, 472.9978427830137, 476.08825303264865,
			479.19227145619504, 482.30995797527555, 485.44137277536936, 488.5865763069732, 491.74562928676926,
			494.91859269879654, 498.10552779562863, 501.3064960995559, 504.52155940377315, 507.7507797735727,
			510.99421954754223, 514.2519413387683, 517.5240080360453, 520.8104828050894, 524.1114290897576,
			527.426910613273, 530.7569913794545, 534.1017356739524, 537.4612080654898, 540.835473407109,
			544.2245968374228, 547.628643781873, 551.0476799539923, 554.4817713566733, 557.9309842834439,
			561.3953853197445, 564.8750413442159, 568.3700195299889, 571.8803873459815, 575.4062125582012,
			578.9475632310534, 582.5045077286555, 586.0771147161558, 589.6654531610602, 593.2695923345625,
			596.8896018128829, 600.5255514786096, 604.1775115220491, 607.8455524425809, 611.5297450500178,
			615.2301604659739, 618.9468701252365, 622.6799457771463, 626.4294594869809, 630.1954836373476,
			633.9780909295802, 637.7773543851414, 641.5933473470344, 645.4261434812171, 649.2758167780247,
			653.1424415535984, 657.0260924513195, 660.9268444432511, 664.8447728315842, 668.7799532500926,
			672.7324616655925, 676.7023743794088, 680.689768028848, 684.6947195886783, 688.7173063726151,
			692.7576060348132, 696.8156965713665, 700.8916563218136, 704.9855639706495, 709.0974985488451,
			713.2275394353726, 717.3757663587384, 721.5422593985214, 725.7270989869198, 729.9303659103028,
			734.1521413107713, 738.392506687723, 742.651543899427, 746.9293351646027, 751.225963064009,
			755.5415105420354, 759.8760609083067, 764.2296978392884, 768.602505379904, 772.9945679451562,
			777.4059703217571, 781.8367976697643, 786.2871355242265, 790.7570697968325, 795.2466867775717,
			799.7560731363977, 804.2853159249038, 808.8345025780022, 813.4037209156119, 817.993059144354,
			822.6026058592549, 827.2324500454565, 831.8826810799338, 836.55338873322, 841.2446631711405,
			845.9565949565525, 850.689275051093, 855.4427948169366, 860.2172460185573, 865.0127208245007,
			869.8293118091631, 874.6671119545795, 879.5262146522169, 884.4067137047786, 889.3087033280145,
			894.23227815254, 899.1775332256618, 904.1445640132149, 909.1334664014037, 914.1443366986535,
			919.1772716374704, 924.2323683763072, 929.3097245014404, 934.4094380288534, 939.531607406129,
			944.6763315143494, 949.843709670006, 955.0338416269145, 960.2468275781433, 965.4827681579462,
			970.7417644437055, 976.0239179578828, 981.3293306699792, 986.658104998504, 992.0103438129512,
			997.3861504357859, 1002.7856286444392, 1008.2088826733099, 1013.656017215779, 1019.1271374262288,
			1024.6223489220747, 1030.141757785802, 1035.6854705670157, 1041.253594284496, 1046.8462364282652,
			1052.4635049616618, 1058.105508323426, 1063.7723554297913, 1069.464155676589, 1075.181018941359,
			1080.9230555854701, 1086.6903764562524, 1092.4830928891363, 1098.3013167098002, 1104.145160236332,
			1110.0147362813964, 1115.9101581544105, 1121.831539663735, 1127.7789951188674, 1133.7526393326523,
			1139.7525876234947, 1145.778955817588, 1151.8318602511497, 1157.9114177726667, 1164.017745745151,
			1170.150962048406, 1176.3111850813023, 1182.4985337640612, 1188.7131275405532, 1194.9550863806032,
			1201.2245307823036, 1207.5215817743447, 1213.8463609183489, 1220.1989903112162, 1226.579592587484,
			1232.9882909216933, 1239.4252090307648, 1245.89047117639, 1252.3842021674288, 1258.906527362318,
			1265.457572671493, 1272.0374645598167, 1278.6463300490225, 1285.2842967201655, 1291.9514927160844,
			1298.6480467438778, 1305.3740880773876, 1312.1297465596917, 1318.9151526056162, 1325.7304372042488,
			1332.5757319214679, 1339.4511689024846, 1346.356880874392, 1353.2930011487265, 1360.2596636240437,
			1367.2570027885022, 1374.2851537224587, 1381.3442521010777, 1388.4344341969497, 1395.5558368827205,
			1402.7085976337362, 1409.892854530695, 1417.1087462623138, 1424.3564121280044, 1431.6359920405648,
			1438.947626528877, 1446.291456740623, 1453.6676244450073, 1461.0762720354946, 1468.5175425325604,
			1475.9915795864465, 1483.4985274799412, 1491.03853113116, 1498.6117360963433, 1506.2182885726686,
			1513.8583354010714, 1521.532024069079, 1529.2395027136597, 1536.9809201240814, 1544.756425744783,
			1552.5661696782613, 1560.4103026879682, 1568.2889762012187, 1576.202342312118, 1584.1505537844948,
			1592.1337640548506, 1600.1521272353239, 1608.2057981166627, 1616.2949321712126, 1624.4196855559214,
			1632.5802151153503, 1640.7766783847017, 1649.009233592864, 1657.2780396654603, 1665.583256227923,
			1673.9250436085701, 1682.3035628417015, 1690.7189756707103, 1699.1714445512025, 1707.6611326541326,
			1716.1882038689562, 1724.7528228067913, 1733.3551548035982, 1741.9953659233693, 1750.673622961337,
			1759.3900934471899, 1768.1449456483117, 1776.9383485730266, 1785.770471973861, 1794.6414863508242,
			1803.5515629546965, 1812.5008737903354, 1821.4895916199982, 1830.517889966676, 1839.5859431174408,
			1848.6939261268162, 1857.842014820149, 1867.030385797011, 1876.259216434603, 1885.5286848911803,
			1894.8389701094923, 1904.1902518202387, 1913.5827105455342, 1923.0165276023993, 1932.4918851062564,
			1942.008965974447, 1951.5679539297626, 1961.1690335039914, 1970.8123900414803, 1980.498209702714,
			1990.2266794679076, 1999.997987140616, 2009.8123213513595, 2019.669871561268, 2029.5708280657325,
			2039.5153819980849, 2049.503725333285, 2059.5360508916233, 2069.612552342451, 2079.733424207911,
			2089.8988618666986, 2100.1090615578287, 2110.3642203844265, 2120.6645363175353, 2131.0102081999316,
			2141.4014357499677, 2151.8384195654294, 2162.321361127403, 2172.8504628041687, 2183.425927855107,
			2194.0479604346206, 2204.716765596075, 2215.4325492957605, 2226.195518396867, 2237.005880673475,
			2247.8638448145666, 2258.7696204280596, 2269.723418044846, 2280.7254491228614, 2291.775926051168,
			2302.8750621540494, 2314.023071695131, 2325.2201698815225, 2336.4665728679615, 2347.7624977609926,
			2359.108162623161, 2370.5037864772153, 2381.949589310339, 2393.4457920784, 2404.9926167102108,
			2416.5902861118157, 2428.239024170796, 2439.939055760586, 2451.690606744818, 2463.4939039816863,
			2475.349175328318, 2487.2566496451745, 2499.216556800479, 2511.2291276746387, 2523.2945941647095,
			2535.4131891888783, 2547.585146690948, 2559.8107016448594, 2572.0900900592314, 2584.423548981909,
			2596.8113165045406, 2609.2536317671847, 2621.7507349629113, 2634.3028673424465, 2646.9102712188337,
			2659.573189972103, 2672.291868053971, 2685.0665509925684, 2697.8974853971686, 2710.784918962953,
			2723.729100475797, 2736.7302798170654, 2749.7887079684374, 2762.90463701676, 2776.078320158902,
			2789.3100117066506, 2802.5999670916167, 2815.948442870171, 2829.3556967283903, 2842.8219874870306,
			2856.3475751065375, 2869.932720692046, 2883.577686498432, 2897.2827359353764, 2911.0481335724426,
			2924.874145144187, 2938.7610375552945, 2952.7090788857213, 2966.718538395876, 2980.789686531819,
			2994.922794930478, 3009.118136424894, 3023.375985049493, 3037.696616045367, 3052.0803058655943,
			3066.5273321805753, 3081.0379738833913, 3095.6125110951853, 3110.2512251705807, 3124.9543987030984,
			3139.72231553062, 3154.555260740871, 3169.4535206769137, 3184.4173829426813, 3199.447136408535,
			3214.543071216827, 3229.7054787875127, 3244.9346518237758, 3260.230884317672, 3275.5944715558085,
			3291.025710125049, 3306.5248979182293, 3322.092334139914, 3337.7283193121752, 3353.4331552803865,
			3369.2071452190544, 3385.050593637674, 3400.9638063866, 3416.947090662954, 3433.0007550165615,
			3449.1251093558963, 3465.3204649540708, 3481.587134454847, 3497.925431878664, 3514.3356726287066,
			3530.818173496989, 3547.3732526704803, 3564.001229737232, 3580.702425692557, 3597.4771629452293,
			3614.3257653236983, 3631.2485580823454, 3648.2458679077668, 3665.3180229250706, 3682.4653527042174,
			3699.688188266386, 3716.986862090353, 3734.361708118918, 3751.813061765356, 3769.341259919877,
			3786.9466409561405, 3804.629544737792, 3822.3903126250093, 3840.229287481101, 3858.146813679131,
			3876.1432371085543, 3894.2189051819005, 3912.3741668414827, 3930.60937256613, 3948.9248743779494,
			3967.3210258491354, 3985.7981821087806, 4004.356699849734, 4022.9969373354998, 4041.719254407135,
			4060.5240124902043, 4079.411574601766, 4098.382305357364, 4117.436570978073, 4136.574739297577,
			4155.797179769256, 4175.104263473322, 4194.496363123994, 4213.973853076677, 4233.537109335195,
			4253.186509559059, 4272.922433070739, 4292.745260863, 4312.655375606258, 4332.653161655956,
			4352.7390050599915, 4372.913293566175, 4393.1764166297, 4413.528765420673, 4433.970732831659,
			4454.502713485276, 4475.125103741796, 4495.83830170681, 4516.642707238913, 4537.538721957413,
			4558.526749250093, 4579.6071942809995, 4600.780463998253, 4622.046967141916, 4643.40711425188,
			4664.8613176757835, 4686.409991576982, 4708.053551942541, 4729.792416591263, 4751.62700518175,
			4773.5577392205205, 4795.585042070129, 4817.709338957341, 4839.931056981361, 4862.250625122048,
			4884.668474248218, 4907.18503712596, 4929.800748426978, 4952.516044736991, 4975.331364564166,
			4998.247148347571, 5021.263838465683, 5044.381879244938, 5067.601716968288, 5090.923799883831,
			5114.348578213465, 5137.876504161571, 5161.5080319237395, 5185.2436176955625, 5209.08371968141,
			5233.028798103288, 5257.079315209734, 5281.235735284719, 5305.498524656626, 5329.868151707251,
			5354.345086880834, 5378.92980269315, 5403.622773740636, 5428.424476709537, 5453.3353903851175,
			5478.3559956609115, 5503.486775547989, 5528.728215184295, 5554.080801844001, 5579.545024946933,
			5605.121376067997, 5630.810348946676, 5656.612439496572, 5682.528145814966, 5708.557968192433,
			5734.702409122516, 5760.961973311409, 5787.337167687701, 5813.828501412184, 5840.43648588765,
			5867.161634768783, 5894.004463972079, 5920.965491685787, 5948.045238379927, 5975.244226816339,
			6002.562982058759, 6030.002031482969, 6057.5619047869795, 6085.243134001244, 6113.046253498929,
			6140.971800006252, 6169.020312612813, 6197.192332782016, 6225.488404361531, 6253.909073593771,
			6282.45488912645, 6311.126402023183, 6339.924165774102, 6368.848736306554, 6397.900671995841,
			6427.080533675979, 6456.388884650537, 6485.82629070352, 6515.393320110267, 6545.090543648442,
			6574.918534609049, 6604.877868807488, 6634.9691245946815, 6665.192882868244, 6695.549727083679,
			6726.040243265649, 6756.665020019307, 6787.424648541631, 6818.319722632846, 6849.350838707903,
			6880.518595807973, 6911.823595612014, 6943.266442448399, 6974.8477433065655, 7006.568107848749,
			7038.428148421732, 7070.428480068694, 7102.569720541049, 7134.852490310406, 7167.277412580528,
			7199.845113299355, 7232.556221171112, 7265.411367668421, 7298.41118704451, 7331.556316345442,
			7364.847395422425, 7398.285066944162, 7431.869976409246, 7465.602772158641, 7499.484105388167,
			7533.514630161118, 7567.695003420834, 7602.025885003429, 7636.507937650505, 7671.141827021938,
			7705.928221708764, 7740.86779324604, 7775.961216125843, 7811.209167810282, 7846.612328744557,
			7882.171382370126, 7917.887015137868, 7953.759916521364, 7989.790779030176, 8025.980298223243,
			8062.329172722301, 8098.838104225349, 8135.5077975202275, 8172.338960498194, 8209.332304167621,
			8246.488542667681, 8283.808393282172, 8321.292576453348, 8358.941815795808, 8396.756838110507,
			8434.73837339874, 8472.887154876275, 8511.203918987483, 8549.689405419553, 8588.344357116795,
			8627.169520294952, 8666.165644455632, 8705.333482400752, 8744.673790247096, 8784.187327440895,
			8823.874856772482, 8863.737144391042, 8903.774959819371, 8943.989075968764, 8984.380269153906,
			9024.94931910787, 9065.697008997191, 9106.624125436934, 9147.73145850594, 9189.019801762017,
			9230.489952257316, 9272.142710553684, 9313.978880738114, 9355.999270438298, 9398.204690838184,
			9440.595956693664, 9483.173886348277, 9525.939301749027, 9568.89302846225, 9612.035895689523,
			9655.368736283714, 9698.892386765017, 9742.607687337144, 9786.5154819035, 9830.616618083513,
			9874.91194722898, 9919.402324440487, 9964.08860858395, 10008.97166230716, 10054.052352056464,
			10099.331548093483, 10144.810124511892, 10190.488959254333, 10236.36893412932, 10282.4509348283,
			10328.735850942721, 10375.224575981227, 10421.918007386901, 10468.81704655457, 10515.922598848243,
			10563.235573618545, 10610.756884220327, 10658.48744803023, 10706.428186464454, 10754.580024996521,
			10802.943893175125, 10851.52072464211, 10900.311457150467, 10949.31703258245, 10998.53839696776,
			11047.97650050179, 11097.632297563998, 11147.506746736291, 11197.60081082158, 11247.915456862309,
			11298.45165615918, 11349.210384289869, 11400.192621127851, 11451.39935086136, 11502.831562012334,
			11554.490247455544, 11606.37640443772, 11658.491034596847, 11710.83514398147, 11763.40974307011,
			11816.215846790805, 11869.254474540656, 11922.526650205555, 11976.033402179924, 12029.775763386553,
			12083.75477129658, 12137.97146794948, 12192.42689997321, 12247.122118604388, 12302.058179708614,
			12357.236143800843, 12412.657076065829, 12468.32204637874, 12524.232129325765, 12580.388404224894,
			12636.791955146718, 12693.443870935393, 12750.345245229642, 12807.497176483852, 12864.900767989315,
			12922.557127895485, 12980.467369231406, 13038.632609927194, 13097.053972835574, 13155.732585753633,
			13214.669581444512, 13273.866097659335, 13333.323277159132, 13393.042267736928, 13453.02422223989,
			13513.27029859156, 13573.781659814258, 13634.559474051473, 13695.604914590478, 13756.919159884914,
			13818.50339357759, 13880.358804523325, 13942.486586811856, 14004.887939790959, 14067.564068089525,
			14130.516181640887, 14193.745495706135, 14257.25323089757, 14321.040613202305, 14385.108874005886,
			14449.459250116113, 14514.092983786863, 14579.011322742117, 14644.215520200032, 14709.706834897106,
			14775.486531112525, 14841.555878692528, 14907.916153074953, 14974.56863531382, 15041.514612104116,
			15108.75537580659, 15176.292224472696, 15244.126461869702, 15312.259397505799, 15380.692346655418,
			15449.426630384629, 15518.463575576581, 15587.80451495721, 15657.450787120873, 15727.40373655628,
			15797.664713672351, 15868.235074824377, 15939.116182340153, 16010.309404546268, 16081.816115794567,
			16153.637696488628, 16225.775533110464, 16298.23101824723, 16371.00555061816, 16444.10053510154,
			16517.51738276183, 16591.257510876916, 16665.32234296544, 16739.713308814327, 16814.43184450636,
			16889.479392447887, 16964.857401396708, 17040.56732648998, 17116.610629272393, 17192.988777724295,
			17269.7032462901, 17346.755515906727, 17424.147074032153, 17501.879414674208, 17579.95403841932,
			17658.372452461575, 17737.136170631737, 17816.24671342652, 17895.705608037948, 17975.51438838275,
			18055.674595132106, 18136.18777574127, 18217.055484479508, 18298.279282460106, 18379.86073767044,
			18461.801425002337, 18544.10292628239, 18626.766830302586, 18709.794732850874, 18793.188236742062,
			18876.948951848717, 18961.078495132224, 19045.578490674056, 19130.450569707045, 19215.696370646983,
			19301.31753912413, 19387.315728015084, 19473.69259747463, 19560.449814967786, 19647.589055302047,
			19735.112000659643, 19823.02034063008, 19911.315772242717 };
	private static String soundFilePath = "/Users/anonymouschattopadhyay/Desktop/research/audio_text/";

	/**************************************************************************************/
	// go to the root /cise/research/compneuro1/anonymous/sensoryOnRealData/SensoryCoding
	// find ./src -name "*.java" > sources_list.txt
	// javac -cp "./lib/*" @sources_list.txt
	// cd ./src
	// java -cp .:"../lib/*" org.junit.runner.JUnitCore
	// sensoryCoding.test.DriverTest
	/**************************************************************************************/

	// @Ignore
	@Test
	public void testDriverRecons() throws Exception {
		boolean isPlotExpt = true;
		boolean serverFlag = false;
		ConfigurationParameters.lengthOfComponentSignals = 8820000;
		ConfigurationParameters.numberofKernelComponents = 100;
		ConfigurationParameters.OVERLAP_FACTOR = 2.0 / 3.0;

		ConfigurationParameters.SHOULD_CHECK_RESIDUALS = true;
		ConfigurationParameters.USE_PRECONDITIONER = false;
		ConfigurationParameters.USE_LEAST_SQUARE = false;
		ConfigurationParameters.ZERO_PADDING_NEEDED = true;
		/*****************************************************************/
		/******** check this every time you run the code *****************/
		/*****************************************************************/

		int numKernelMultiplier = 2;
		String kernelcoefffolder = "solutions_1000/";

		double[] centerFrequencies = center_frequencies_1000_kernels;
		if (numKernelMultiplier == 2) {
			kernelcoefffolder = "solutions_2000/";
			centerFrequencies = center_frequencies_2000_kernels;
		}

		ConfigurationParameters.numberOfThreads = 40;
		int serverNumber = 2;
		boolean linearlyInterpolate = true;
		int upsampleRate = 10;
		int ZERO_PAD_LENGTH = 2000;
		ConfigurationParameters.AHP_REFRACTORY_PERIOD = 60.0 * upsampleRate;
		ConfigurationParameters.numberOfKernels = 910 * numKernelMultiplier;
		ConfigurationParameters.initialThresHoldValue = 0.0001;

		int numberOfKernels = ConfigurationParameters.numberOfKernels;
		int MAX_SIGNAL_LENGTH = 500;
		int steps = 10;
		int steps_interval = 3000;
		int intermediate_step = 200;
		// maximum length of the signal we are allowing in this test
		int startindex = 5;
		int endIndex = 1000;

		int[] kernelIndexes = new int[numberOfKernels];
		/**
		 * insert the tall kernels
		 */
		for (int i = 0; i < 100 * numKernelMultiplier; i += 10) {
			kernelIndexes[i / 10] = i;
		}
		/**
		 * insert the short kernels
		 */
		for (int i = 100 * numKernelMultiplier; i < 1000 * numKernelMultiplier; i++) {
			kernelIndexes[i - 90 * numKernelMultiplier] = i;
		}

		/*****************************************************************/
		/*****************************************************************/
		/*****************************************************************/

		ConfigurationParameters.SAMPLING_FREQUENCY = 44100 * upsampleRate;

		ConfigurationParameters.AHP_HIGH_VALUE = 1000.0 * upsampleRate;
		ConfigurationParameters.AHP_SLOPE = ConfigurationParameters.AHP_HIGH_VALUE
				/ ConfigurationParameters.AHP_REFRACTORY_PERIOD;

		// set the configuration params
		String absolutePath = null;
		if (serverFlag) {
			absolutePath = "/cise/research/compneuro" + serverNumber + "/anonymous/sensoryOnRealData/SensoryCoding/";
			soundFilePath = absolutePath + "audio_text/";
		} else {
			absolutePath = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/";
			soundFilePath = "/Users/anonymouschattopadhyay/Desktop/research/audio_text/";
		}

		// get the bspline lengths
		int[] bsplineLengths = new int[numberOfKernels];

		double[][] kernelCoeffs = new double[ConfigurationParameters.numberOfKernels][];
		// populate the B-spline kernel coefficients
		for (int i = 0; i < kernelIndexes.length; i++) {
			bsplineLengths[i] = (int) Math.ceil((22.0 / centerFrequencies[kernelIndexes[i]])
					* (1.0 / (ConfigurationParameters.numberofKernelComponents + 2.0))
					* ConfigurationParameters.SAMPLING_FREQUENCY);
			String file = null;
			if (serverFlag) {
				file = absolutePath + "src/sensoryCoding/bsplineCoefficients/" + kernelcoefffolder + "solution-"
						+ kernelIndexes[i] + ".values";
			} else {
				file = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/src/sensoryCoding/bsplineCoefficients/"
						+ kernelcoefffolder + "solution-" + kernelIndexes[i] + ".values";
			}
			kernelCoeffs[i] = Utilities.reverse(
					Utilities.getCoefficientsArrayFromFile(file, ConfigurationParameters.numberofKernelComponents));
		}

		KernelManager kr = new KernelManager(false, kernelCoeffs, bsplineLengths, false);
		kr.normalizeAllKernels(true);

		for (int index = startindex; index < endIndex; index++) {
			System.out.println("Experimenting with signal number#" + index);
			/*****************************************************************/
			/******** change this next time before you run ******************/
			/*****************************************************************/
			/*****************************************************************/
			// String soundData = absolutePath + "output/bandpasssignal1.txt";
			String soundData = soundFilePath + index + ".txt";
			FileReader in = new FileReader(soundData);
			BufferedReader brSound = new BufferedReader(in);

			List<Double> data = Utilities.readListFromFile(brSound);
			int zeroPadLength = isPlotExpt ? ZERO_PAD_LENGTH : 0;
			double[] dataVals = new double[Math.min(data.size(), MAX_SIGNAL_LENGTH) + zeroPadLength];
			System.out.println("Size of the data set is: " + data.size());
			for (int i = 0; i < data.size() && i < MAX_SIGNAL_LENGTH; i++) {
				dataVals[i] = data.get(i);
			}
			if (upsampleRate > 1) {
				if (linearlyInterpolate) {
					dataVals = SignalUtils.linearlyUpsampleSignal(dataVals, upsampleRate);
				} else {
					dataVals = SignalUtils.getQuadraticinterpolationOfSignal(dataVals, upsampleRate);
				}
			}
			Signal testSignal = new Signal(dataVals);

			Network net = new Network(testSignal, kr);
			double before = System.currentTimeMillis();
			net.init(testSignal, true, false);
			System.out.println("Time for init:" + (System.currentTimeMillis() - before));
			before = System.currentTimeMillis();
			/*****************************************************************/
			/******** calculate the spike times ******************/
			/*****************************************************************/
			/*****************************************************************/
			// net.calculateSpikeTimings();
			List<SpikeTimeIndexAndConvolvedValues>[] spikesPerKernel = net.calculateSpikeTimingsNeo();

			/****************************************/
			/********* Noting Spike Times *************/
			/****************************************/
//			for (int i = 0; i < spikesPerKernel.length; i++) {
//				List<Double> spikeTimes = new ArrayList<Double>();
//				for (int k = 0; k < spikesPerKernel[i].size(); k++) {
//					spikeTimes.add(spikesPerKernel[i].get(k).spikeTime);
//				}
//				Utilities.writeListToFile(absolutePath + "output/spiketimes/kernelSpikes-" + i + ".txt", spikeTimes);
//			}

			System.out.println("Number of spikes:" + net.spikeTimings.size());

			/******************************************************************/
			/******************* do the reconstruction ************************/
			/******************************************************************/
			before = System.currentTimeMillis();
			net.reconstructSignal();
			System.out.println("Reconstruction took:" + (System.currentTimeMillis() - before));
			double[] coeffsForCheck = net.coefficientsOfReconstructedSignal;

			double[] actualValues = Utilities.matrixVectorProduct(net.pMatrix, coeffsForCheck,
					ConfigurationParameters.numberOfThreads);
			int rowStart = 0;
			int rowEnd = actualValues.length;
			// check the p-mat diffs
			double avg = 0;
			for (int i = rowStart; i < rowEnd; i++) {
				avg = (avg * i + Math.abs((actualValues[i] - net.convoledValues[0][i]) / actualValues[i])) / (i + 1);
			}
			System.out.println("So the avg evaluation error is:" + avg);
			before = System.currentTimeMillis();

			System.out.println("Error rate fast:" + net.calculateErrorFast());

			Signal reconstructedSignal = net.getReconstructedSignal();
//			Signal trimmedSignal = SignalUtils.getTrimmedSignal(reconstructedSignal, 0,
//					MAX_SIGNAL_LENGTH * upsampleRate);
//			trimmedSignal.DrawSignal("See the reconstruction");
			System.out.println("Error manual"
					+ (SignalUtils.calculateSquaredNorm(SignalUtils.subtractSignal(testSignal, reconstructedSignal)))
							/ net.signalNormSquare);
			before = System.currentTimeMillis();
			/**
			 * This list stores the number of spikes taken for compression
			 */
			List<Integer> numberOfSpikesList = new ArrayList<Integer>();

			/**
			 * populate the list of number of spikes on which compression is to be applied
			 */
			for (int i = net.spikeTimings.size()
					- (net.spikeTimings.size() % steps_interval); i >= 5000; i -= steps_interval) {
				numberOfSpikesList.add(i);
			}

			for (int k = Math.min(net.spikeTimings.size() - net.spikeTimings.size() % intermediate_step,
					5000); k > 1000; k = k - intermediate_step) {
				if ((k <= net.spikeTimings.size()))
					numberOfSpikesList.add(k);
			}

			for (int k = 1000; k > 0; k = k - 10) {
				if ((k <= net.spikeTimings.size()))
					numberOfSpikesList.add(k);
			}

//			for (int k = 13000; k >= 1000; k = k - 4000) {
//				numberOfSpikesList.add(k);
//			}
//			for (int k = 800; k > 100; k -= 200) {
//				numberOfSpikesList.add(k);
//			}
			/******************************************************************/
			/********** apply flat compression reconstruction *****************/
			/******************************************************************/
			String path = absolutePath + "outputplotfinal/";
			Integer[] spikeCounts =
//					new Integer [numberOfSpikesList.size()];
//			numberOfSpikesList.toArray(spikeCounts);
					{ 1000, 600, 200 };
			double[] errorValues = net.applyFlatCompression(numberOfSpikesList, spikeCounts, path, index, 0,
					MAX_SIGNAL_LENGTH * upsampleRate);// net.applyFlatCompression(steps);
			String fileName = absolutePath + "output/report-" + index + ".txt";

			System.out.println("Time for applying flat compression:" + (System.currentTimeMillis() - before));

			Utilities.appendNumbersToFile(fileName, errorValues);
			System.out.println("End of reconstruction");
		}

	}

	// @Ignore
	@Test
	public void testManualReconsError() throws Exception {
		boolean isReversedKernel = true;
		boolean serverFlag = false;
		int serverNumber = 2;
		int MAX_SIGNAL_LENGTH = 500;
		int ZERO_PAD_LENGTH = 2000;
		int numKernelMultiplier = 2;
		int upsampleRate = 10;		
		ConfigurationParameters.AHP_REFRACTORY_PERIOD = 60.0 * upsampleRate;
		ConfigurationParameters.numberOfThreads = 10;
		boolean isPlotExpt = true;
		ConfigurationParameters.lengthOfComponentSignals = 8820000;
		ConfigurationParameters.numberofKernelComponents = 100;
		ConfigurationParameters.OVERLAP_FACTOR = 2.0 / 3.0;

		ConfigurationParameters.SHOULD_CHECK_RESIDUALS = true;
		ConfigurationParameters.USE_PRECONDITIONER = false;
		ConfigurationParameters.USE_LEAST_SQUARE = false;
		ConfigurationParameters.ZERO_PADDING_NEEDED = true;
		int startindex = 5;
		int endIndex = 10;
		/*****************************************************************/
		/******** check this every time you run the code *****************/
		/*****************************************************************/

		String kernelcoefffolder = "solutions_1000/";

		double[] centerFrequencies = center_frequencies_1000_kernels;
		if (numKernelMultiplier == 2) {
			kernelcoefffolder = "solutions_2000/";
			centerFrequencies = center_frequencies_2000_kernels;
		}
		
		boolean linearlyInterpolate = true;

		ConfigurationParameters.numberOfKernels = 910 * numKernelMultiplier;
		ConfigurationParameters.initialThresHoldValue = 0.0001;

		int numberOfKernels = ConfigurationParameters.numberOfKernels;

		int steps = 10;
		int steps_interval = 3000;
		int intermediate_step = 200;
		// maximum length of the signal we are allowing in this test
		

		int[] kernelIndexes = new int[numberOfKernels];
		/**
		 * insert the tall kernels
		 */
		for (int i = 0; i < 100 * numKernelMultiplier; i += 10) {
			kernelIndexes[i / 10] = i;
		}
		/**
		 * insert the short kernels
		 */
		for (int i = 100 * numKernelMultiplier; i < 1000 * numKernelMultiplier; i++) {
			kernelIndexes[i - 90 * numKernelMultiplier] = i;
		}

		/*****************************************************************/
		/*****************************************************************/
		/*****************************************************************/

		ConfigurationParameters.SAMPLING_FREQUENCY = 44100 * upsampleRate;

		ConfigurationParameters.AHP_HIGH_VALUE = 1000.0 * upsampleRate;
		ConfigurationParameters.AHP_SLOPE = ConfigurationParameters.AHP_HIGH_VALUE
				/ ConfigurationParameters.AHP_REFRACTORY_PERIOD;

		// set the configuration params
		String [] absolutePath = {null};
		if (serverFlag) {
			absolutePath[0] = "/cise/research/compneuro" + serverNumber + "/anonymous/sensoryOnRealData/SensoryCoding/";
			soundFilePath = absolutePath + "audio_text/";
		} else {
			absolutePath[0] = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/";
			soundFilePath = "/Users/anonymouschattopadhyay/Desktop/research/audio_text/";
		}

		// get the bspline lengths
		int[] bsplineLengths = new int[numberOfKernels];

		double[][] kernelCoeffs = new double[ConfigurationParameters.numberOfKernels][];
		// populate the B-spline kernel coefficients
		for (int i = 0; i < kernelIndexes.length; i++) {
			bsplineLengths[i] = (int) Math.ceil((22.0 / centerFrequencies[kernelIndexes[i]])
					* (1.0 / (ConfigurationParameters.numberofKernelComponents + 2.0))
					* ConfigurationParameters.SAMPLING_FREQUENCY);
			String file = null;
			if (serverFlag) {
				file = absolutePath + "src/sensoryCoding/bsplineCoefficients/" + kernelcoefffolder + "solution-"
						+ kernelIndexes[i] + ".values";
			} else {
				file = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/src/sensoryCoding/bsplineCoefficients/"
						+ kernelcoefffolder + "solution-" + kernelIndexes[i] + ".values";
			}
			if (isReversedKernel) {
				kernelCoeffs[i] = Utilities.reverse(
						Utilities.getCoefficientsArrayFromFile(file, ConfigurationParameters.numberofKernelComponents));
			} else {
				kernelCoeffs[i] = Utilities.getCoefficientsArrayFromFile(file,
						ConfigurationParameters.numberofKernelComponents);
			}
		}

		KernelManager kr = new KernelManager(false, kernelCoeffs, bsplineLengths, false);
		kr.normalizeAllKernels(true);

		int indexPerThread = (endIndex - startindex+1)/ ConfigurationParameters.numberOfThreads;
		IntStream.range(0, ConfigurationParameters.numberOfThreads).parallel().forEach(t -> {
		int startIndexForThisThread = startindex+ t*indexPerThread;	
		int endIndexForThisThread = startIndexForThisThread + indexPerThread;
		if(t== ConfigurationParameters.numberOfThreads-1) {
			endIndexForThisThread = endIndex;
		}
		for (int index = startIndexForThisThread; index < Math.min(endIndexForThisThread, endIndex); index++) {
			System.out.println("Experimenting with signal number#" + index);
			/*****************************************************************/
			/******** change this next time before you run ******************/
			/*****************************************************************/
			/*****************************************************************/
			// String soundData = absolutePath + "output/bandpasssignal1.txt";
			String soundData = soundFilePath + index + ".txt";
			FileReader in = null;
			try {
				in = new FileReader(soundData);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			BufferedReader brSound = new BufferedReader(in);

			List<Double> data = null;
			try {
				data = Utilities.readListFromFile(brSound);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			int zeroPadLength = isPlotExpt ? ZERO_PAD_LENGTH : 0;
			double[] dataVals = new double[Math.min(data.size(), MAX_SIGNAL_LENGTH) + zeroPadLength];
			System.out.println("Size of the data set is: " + data.size());
			for (int i = 0; i < data.size() && i < MAX_SIGNAL_LENGTH; i++) {
				dataVals[i] = data.get(i);
			}
			if (upsampleRate > 1) {
				if (linearlyInterpolate) {
					dataVals = SignalUtils.linearlyUpsampleSignal(dataVals, upsampleRate);
				} else {
					dataVals = SignalUtils.getQuadraticinterpolationOfSignal(dataVals, upsampleRate);
				}
			}
			Signal testSignal = new Signal(dataVals);

			Network net = null;
			try {
				net = new Network(testSignal, kr);			
				net.init(testSignal, true, false);			
				net.calculateSpikeTimings();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			/******************************************************************/
			/***************** download the reconstructions *******************/
			/******************************************************************/

			/**
			 * This list stores the number of spikes taken for compression
			 */
			List<Integer> numberOfSpikesList = new ArrayList<Integer>();

			/**
			 * populate the list of number of spikes on which compression is to be applied
			 */
			for (int i = net.spikeTimings.size()
					- (net.spikeTimings.size() % steps_interval); i >= 5000; i -= steps_interval) {
				numberOfSpikesList.add(i);
			}

			for (int k = Math.min(net.spikeTimings.size() - net.spikeTimings.size() % intermediate_step,
					5000); k > 1000; k = k - intermediate_step) {
				if ((k <= net.spikeTimings.size()))
					numberOfSpikesList.add(k);
			}

			for (int k = 1000; k > 0; k = k - 10) {
				if ((k <= net.spikeTimings.size()))
					numberOfSpikesList.add(k);
			}

			/****************************************************************************/
			/***************** get manual reconstruction errors now ***********************/
			/****************************************************************************/
			String path = absolutePath[0] + "outputplotfinal/";
			double[] allManualErrors = new double[numberOfSpikesList.size()];
			for (int i = 0; i < numberOfSpikesList.size(); i++) {
				/******************* recompute the reconstructed signal **********************/
				Signal reconstructedSignal = null;
				int spikeCount = numberOfSpikesList.get(i);

				List<Double> coeffs = null;
				try {
					coeffs = Utilities
							.readListByFileName(path + "compCoeffs" + index + "-" + spikeCount + ".txt");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				List<Double> spikeTimes = null;
				try {
					spikeTimes = Utilities
							.readListByFileName(path + "compSpikeTimes" + index + "-" + spikeCount + ".txt");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				List<Double> spikeIndexes = null;
				try {
					spikeIndexes = Utilities
							.readListByFileName(path + "compKernelIndexes" + index + "-" + spikeCount + ".txt");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				Signal newReconstruction = new Signal(new double[0]);
				for (int k = 0; k < spikeCount; k++) {
					Signal kerSignal = null;
					try {
						kerSignal = SignalUtils.scalarMultiply(
								(SignalUtils.shiftSignal(kr.getInvertedKernel((int) (double) (spikeIndexes.get(k))),
										spikeTimes.get(k))),
								coeffs.get(k));
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					newReconstruction = SignalUtils.addTwoSignals(newReconstruction, kerSignal);
				}

				allManualErrors[i] = SignalUtils.calculateSquaredNorm(
						SignalUtils.subtractSignal(testSignal, newReconstruction)) / net.signalNormSquare;
				System.out.println(
						"Manual error for signal-" + i + " with " + spikeCount + " spikes is:" + allManualErrors[i]);
			}

			String fileName = absolutePath[0] + "output/manualErrors-" + index + ".txt";
			Utilities.appendNumbersToFile(fileName, allManualErrors);
			System.out.println("End of reconstruction");
		}});
	}

	@Ignore
	@Test
	public void testWritePMatrix() throws Exception {
		boolean serverFlag = false;
		ConfigurationParameters.lengthOfComponentSignals = 8820000;
		ConfigurationParameters.numberofKernelComponents = 100;
		ConfigurationParameters.OVERLAP_FACTOR = 2.0 / 3.0;

		ConfigurationParameters.SHOULD_CHECK_RESIDUALS = true;
		ConfigurationParameters.USE_PRECONDITIONER = false;
		ConfigurationParameters.USE_LEAST_SQUARE = false;
		ConfigurationParameters.ZERO_PADDING_NEEDED = true;

		int upsampleRate = 100;
		ConfigurationParameters.numberOfKernels = 90;
		ConfigurationParameters.SAMPLING_FREQUENCY = 44100 * upsampleRate;
		ConfigurationParameters.initialThresHoldValue = 0.0001;
		ConfigurationParameters.AHP_REFRACTORY_PERIOD = 100.0 * upsampleRate;
		ConfigurationParameters.AHP_HIGH_VALUE = 1000.0 * upsampleRate;
		ConfigurationParameters.AHP_SLOPE = ConfigurationParameters.AHP_HIGH_VALUE
				/ ConfigurationParameters.AHP_REFRACTORY_PERIOD;
		ConfigurationParameters.numberOfThreads = 40;
		int MAX_SIGNAL_LENGTH = 200;

		int steps = 100;
		// maximum length of the signal we are allowing in this test
		int startindex = 1;
		int endIndex = 1000;

		// set the configuration params
		String absolutePath = null;
		if (serverFlag) {
			absolutePath = "/cise/research/compneuro4/anonymous/sensoryOnRealData/SensoryCoding/";
			soundFilePath = absolutePath + "audio_text/";
		} else {
			absolutePath = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/";
			soundFilePath = "/Users/anonymouschattopadhyay/Desktop/research/audio_text/";
		}
		// set the gammatone kernels
		double[] centerFrequencies = center_frequencies_100_kernels;
		// get the bspline lengths
		int[] bsplineLengths = new int[ConfigurationParameters.numberOfKernels];
		for (int i = 0; i < ConfigurationParameters.numberOfKernels; i++) {
			bsplineLengths[i] = 3 * (int) Math.ceil(
					(22.0 / centerFrequencies[i]) * (1.0 / (ConfigurationParameters.numberofKernelComponents + 2.0))
							* ConfigurationParameters.SAMPLING_FREQUENCY);
		}

		double[][] kernelCoeffs = new double[ConfigurationParameters.numberOfKernels][];
		// populate the B-spline kernel coefficients
		for (int i = 0; i < ConfigurationParameters.numberOfKernels; i++) {
			String file = null;
			if (serverFlag) {
				file = absolutePath + "src/sensoryCoding/bsplineCoefficients/solution-" + i + ".values";
			} else {
				file = absolutePath + "src/sensoryCoding/bsplineCoefficients/solution-" + i + ".values";
			}
			System.out.println("file name is:" + file);
			kernelCoeffs[i] = Utilities.getCoefficientsArrayFromFile(file,
					ConfigurationParameters.numberofKernelComponents);
		}

		KernelManager kr = new KernelManager(false, kernelCoeffs, bsplineLengths);
		kr.normalizeAllKernels(true);
		double[] errorValues = new double[endIndex - startindex];
		// int presetLength = 10000;
		for (int index = startindex; index < endIndex; index++) {
			// try {
			double beginTime = System.currentTimeMillis();
			System.out.println("Experimenting with signal number#" + index);
			/*****************************************************************/
			/******** change this next time before you run ******************/
			/*****************************************************************/
			/*****************************************************************/
			// String soundData = absolutePath + "output/bandpasssignal1.txt";
			String soundData = soundFilePath + index + ".txt";
			FileReader in = new FileReader(soundData);
			BufferedReader brSound = new BufferedReader(in);

			List<Double> data = Utilities.readListFromFile(brSound);
			double[] dataVals = new double[Math.min(data.size(), MAX_SIGNAL_LENGTH)];
			System.out.println("Size of the data set is: " + data.size());
			for (int i = 0; i < data.size() && i < MAX_SIGNAL_LENGTH; i++) {
				dataVals[i] = data.get(i);
			}
			if (upsampleRate > 1)
				dataVals = SignalUtils.linearlyUpsampleSignal(dataVals, upsampleRate);
			Signal testSignal = new Signal(dataVals);

			Network net = new Network(testSignal, kr);
			double before = System.currentTimeMillis();
			net.init(testSignal, true, false);

			int kernelIndex = 10;
			System.out
					.println("cf:" + centerFrequencies[kernelIndex] + " kernel length:" + bsplineLengths[kernelIndex]);
			Signal krSignal = net.kernelMgr.getKernel(kernelIndex);
			SignalUtils.storeSignal(absolutePath + "output/kernelSignal.txt", krSignal, false);

			// System.out.println("Time for init:" + (System.currentTimeMillis() - before));
			before = System.currentTimeMillis();

			/*****************************************************************************/
			/****************
			 * Spike Time computation and signal
			 ****************************/
			/****************
			 * reconstruction happens over here
			 *****************************/
			/*****************************************************************************/
			net.calculateSpikeTimings();
			System.out.println("Number of spikes:" + net.spikeTimings.size());
			net.reconstructSignal();

			double[] coeffsForCheck = net.coefficientsOfReconstructedSignal;
			// Arrays.sort(coeffsForCheck);

			double[] actualValues = Utilities.matrixVectorProduct(net.pMatrix, coeffsForCheck,
					ConfigurationParameters.numberOfThreads);
			int rowStart = 0;
			int rowEnd = actualValues.length;
			// check the p-mat diffs
			double avg = 0;
			for (int i = rowStart; i < rowEnd; i++) {
				// System.out.println((actualValues[i] - net.convoledValues[0][i]) /
				// actualValues[i]);
				avg = (avg * i + Math.abs((actualValues[i] - net.convoledValues[0][i]) / actualValues[i])) / (i + 1);
			}
			System.out.println("The avg evaluation error is:" + avg);
			before = System.currentTimeMillis();

			double errorHere = net.calculateErrorRate();
			System.out.println("Error Rate:" + errorHere);
			errorValues[index - startindex] = errorHere;
			// System.out.println("Error rate fast:" + net.calculateErrorFast());
			Utilities.writeListToFile(absolutePath + "output/spikestats1.txt", net.totalSpikeCount);
//				Signal reconsSignal = net.getReconstructedSignal();
//				Signal errorSignal = SignalUtils.addTwoSignals(testSignal,
//						SignalUtils.scalarMultiply(reconsSignal, -1));
//				SignalUtils.storeSignal(absolutePath + "output/reconssignal1.txt", reconsSignal);
//				SignalUtils.storeSignal(absolutePath + "output/errorsignal1.txt", errorSignal);
//				SignalUtils.storeSignal(absolutePath + "output/inputsignal1.txt", testSignal, false);
//				before = System.currentTimeMillis();
			String outputPathPMatrix = absolutePath + "output/pMat-" + index + ".txt";
			String outputPathThresholds = absolutePath + "output/thresholds-" + index + ".txt";
			String outputPathCoeffs = absolutePath + "output/coeffs-" + index + ".txt";
			Utilities.writeMatrixToFile(outputPathPMatrix, net.pMatrix);
			Utilities.writeListToFile(outputPathThresholds, net.convoledValues[0]);
			Utilities.writeListToFile(outputPathCoeffs, net.coefficientsOfReconstructedSignal);
			System.out.println("The entire loop took:" + (System.currentTimeMillis() - beginTime));

//			} catch (Exception e) {
//				// do nothing
//			}
		}
		String outputErrorValues = absolutePath + "outputErrorRates.txt";
		Utilities.writeListToFile(outputErrorValues, errorValues);
	}

	@Ignore
	@Test
	public void testBandPassing() throws IOException {
		int MAX_SIGNAL_LENGTH = 200;
		ConfigurationParameters.SAMPLING_FREQUENCY = 4410000;
		String soundData = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/"
				+ "output/inputsignal1.txt";
		FileReader in = new FileReader(soundData);
		BufferedReader brSound = new BufferedReader(in);

		List<Double> data = Utilities.readListFromFile(brSound);
		double[] dataVals = new double[Math.min(data.size(), MAX_SIGNAL_LENGTH)];
		System.out.println("Size of the data set is: " + data.size());
		for (int i = 0; i < data.size() && i < MAX_SIGNAL_LENGTH; i++) {
			dataVals[i] = data.get(i);
		}
		Signal testSignal = new Signal(dataVals);
		testSignal.DrawSignal("test signal");

		double[] outSignal = (SignalUtils.linearlyUpsampleSignal(dataVals, 100));
		double[] quadSignal = SignalUtils.getQuadraticinterpolationOfSignal(dataVals, 100);

		(new Signal(outSignal)).DrawSignal("linear interpolation");
//		double[] out = Utilities.calculate_lowpass_output(outSignal, 0.00001,
//				ConfigurationParameters.SAMPLING_FREQUENCY);
//		Signal output = new Signal(out);
		// output.DrawSignal("bandpassed signal");
		(new Signal(quadSignal)).DrawSignal("quadratic interpolation");
		// double[] down = SignalUtils.downSampleSignal(out, 100);
		// (new Signal(down)).DrawSignal("downsampled Signal");
		System.out.println("Done here");
	}

	@Ignore
	@Test
	public void testSignalReconstructionPlot() throws Exception {
		boolean isPlotExpt = true;
		double upsampleRate = 10;
		ConfigurationParameters.lengthOfComponentSignals = 8820000;
		ConfigurationParameters.numberofKernelComponents = 100;
		ConfigurationParameters.OVERLAP_FACTOR = 2.0 / 3.0;

		ConfigurationParameters.SHOULD_CHECK_RESIDUALS = true;
		ConfigurationParameters.USE_PRECONDITIONER = false;
		ConfigurationParameters.USE_LEAST_SQUARE = false;
		ConfigurationParameters.ZERO_PADDING_NEEDED = true;
		int MAX_SIGNAL_LENGTH = 1000;
		/*****************************************************************/
		/******** check this every time you run the code *****************/
		/*****************************************************************/

		int numKernelMultiplier = 1;
		String kernelcoefffolder = "solutions_1000/";
		double[] centerFrequencies = center_frequencies_1000_kernels;
		boolean serverFlag = false;
		int serverNumber = 1;
		boolean linearlyInterpolate = true;
		ConfigurationParameters.numberOfKernels = 910 * numKernelMultiplier;
//		ConfigurationParameters.initialThresHoldValue = 0.0001;
//
//		ConfigurationParameters.numberOfThreads = 10;
		int numberOfKernels = ConfigurationParameters.numberOfKernels;
		int steps = 10;
		// maximum length of the signal we are allowing in this test
		int startindex = 10;
		int endIndex = 12;

		int[] kernelIndexes = new int[numberOfKernels];
		/**
		 * insert the tall kernels
		 */
		for (int i = 0; i < 100 * numKernelMultiplier; i += 10) {
			kernelIndexes[i / 10] = i;
		}
		/**
		 * insert the short kernels
		 */
		for (int i = 100 * numKernelMultiplier; i < 1000 * numKernelMultiplier; i++) {
			kernelIndexes[i - 90 * numKernelMultiplier] = i;
		}

		/*****************************************************************/
		/*****************************************************************/
		/*****************************************************************/

		ConfigurationParameters.SAMPLING_FREQUENCY = 44100 * (int) upsampleRate;

		// set the configuration params
		String absolutePath = null;
		if (serverFlag) {
			absolutePath = "/cise/research/compneuro" + serverNumber + "/anonymous/sensoryOnRealData/SensoryCoding/";
			soundFilePath = absolutePath + "audio_text/";
		} else {
			absolutePath = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/";
			soundFilePath = "/Users/anonymouschattopadhyay/Desktop/research/audio_text/";
		}

		// get the bspline lengths
		int[] bsplineLengths = new int[numberOfKernels];

		double[][] kernelCoeffs = new double[ConfigurationParameters.numberOfKernels][];
		// populate the B-spline kernel coefficients
		for (int i = 0; i < kernelIndexes.length; i++) {
			bsplineLengths[i] = (int) Math.ceil((22.0 / centerFrequencies[kernelIndexes[i]])
					* (1.0 / (ConfigurationParameters.numberofKernelComponents + 2.0))
					* ConfigurationParameters.SAMPLING_FREQUENCY);
			String file = null;
			if (serverFlag) {
				file = absolutePath + "src/sensoryCoding/bsplineCoefficients/" + kernelcoefffolder + "solution-"
						+ kernelIndexes[i] + ".values";
			} else {
				file = "/Users/anonymouschattopadhyay/Desktop/research/oldsensorycoding/SensoryCoding/src/sensoryCoding/bsplineCoefficients/"
						+ kernelcoefffolder + "solution-" + kernelIndexes[i] + ".values";
			}
			kernelCoeffs[i] = Utilities.getCoefficientsArrayFromFile(file,
					ConfigurationParameters.numberofKernelComponents);
		}

		KernelManager kr = new KernelManager(false, kernelCoeffs, bsplineLengths, false);
		kr.normalizeAllKernels(true);
		int x = 700;
		Signal sig = kr.getKernel(x);
		sig.DrawSignal("test kernel");
		int spikeCounts[] = { 200, 1000, 10000 };
		for (int i = startindex; i <= endIndex; i++) {

			String soundData = soundFilePath + i + ".txt";
			FileReader in = new FileReader(soundData);
			BufferedReader brSound = new BufferedReader(in);

			List<Double> data = Utilities.readListFromFile(brSound);
			int zeroPadLength = isPlotExpt ? 2000 : 0;
			double[] dataVals = new double[Math.min(data.size(), MAX_SIGNAL_LENGTH) + zeroPadLength];
			for (int l = 0; l < data.size() && l < MAX_SIGNAL_LENGTH; l++) {
				dataVals[l] = data.get(l);
			}
			(new Signal(dataVals)).DrawSignal("Input Signal#" + i);
			for (int j = 0; j < spikeCounts.length; j++) {
				String path = absolutePath + "output/compression/";
				List<Double> coeffs = Utilities
						.readListByFileName(path + "compCoeffs" + i + "-" + spikeCounts[j] + ".txt");
				List<Double> spikeTimes = Utilities
						.readListByFileName(path + "compSpikeTimes" + i + "-" + spikeCounts[j] + ".txt");
				List<Double> spikeIndexes = Utilities
						.readListByFileName(path + "compKernelIndexes" + i + "-" + spikeCounts[j] + ".txt");
				Signal newReconstruction = new Signal(new double[0]);
				for (int k = 0; k < spikeCounts[j]; k++) {
					Signal kerSignal = SignalUtils.scalarMultiply(
							(SignalUtils.shiftSignal(kr.getInvertedKernel((int) (double) (spikeIndexes.get(k))),
									spikeTimes.get(k))),
							coeffs.get(k));
					newReconstruction = SignalUtils.addTwoSignals(newReconstruction, kerSignal);
				}
				newReconstruction.DrawSignal("reconstruction-" + spikeCounts[j] + ".txt", -10000, 10000);
			}
		}
	}
//	@Test
//	public void testArray() {
//		double[][] arr = { { 2, 1 }, { 1, .5 } };
//		arr = Utilities.calculatePSquare(arr, 2);
////		double[] b = { 5, 2.5 };
////		int numSteps = 5;
////		double[] res = new double[5];
////		double[] values = Utilities.applyConjugateGradient(arr, b, 2, numSteps, res);
//		System.out.println("The value of arr is:" + arr[1][0]);
//	}

//	
}
